{"index": 0, "beams": [{"orig_question": "How many singers do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM singer", "score": -0.0002138614654398907}]}
{"index": 1, "beams": [{"orig_question": "What is the total number of singers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM singer", "score": -0.00019705294971572584}]}
{"index": 2, "beams": [{"orig_question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age Desc", "score": -0.08385622501315737}]}
{"index": 3, "beams": [{"orig_question": "What are the names, countries, and ages for every singer in descending order of age?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age Desc", "score": -0.0010247229747264441}]}
{"index": 4, "beams": [{"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(singer.Age), Min(singer.Age), Max(singer.Age) FROM singer WHERE singer.Country = 'terminal'", "score": -0.004885488316169528}]}
{"index": 5, "beams": [{"orig_question": "What is the average, minimum, and maximum age for all French singers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(singer.Age), Min(singer.Age), Max(singer.Age) FROM singer WHERE singer.Country = 'terminal'", "score": -0.01795800660999447}]}
{"index": 6, "beams": [{"orig_question": "Show the name and the release year of the song by the youngest singer.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age Asc LIMIT 1", "score": -0.006576508072384968}]}
{"index": 7, "beams": [{"orig_question": "What are the names and release years for all the songs of the youngest singer?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age Asc LIMIT 1", "score": -0.0012043243496009381}]}
{"index": 8, "beams": [{"orig_question": "What are all distinct countries where singers above age 20 are from?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 'terminal'", "score": -0.0004487037658691406}]}
{"index": 9, "beams": [{"orig_question": "What are  the different countries with singers above age 20?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 'terminal'", "score": -0.0024023056030273438}]}
{"index": 10, "beams": [{"orig_question": "Show all countries and the number of singers in each country.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country", "score": -0.00046193599609978264}]}
{"index": 11, "beams": [{"orig_question": "How many singers are from each country?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Country, Count(*) FROM singer GROUP BY singer.Country", "score": -0.0005410909652141527}]}
{"index": 12, "beams": [{"orig_question": "List all song names by singers above the average age.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT Avg(singer.Age) FROM singer)", "score": -0.0031106318347084994}]}
{"index": 13, "beams": [{"orig_question": "What are all the song names by singers who are older than average?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT Avg(singer.Age) FROM singer)", "score": -0.0025133285670904115}]}
{"index": 14, "beams": [{"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 'terminal' AND 'terminal'", "score": -0.0015186071222998976}]}
{"index": 15, "beams": [{"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 'terminal' AND 'terminal'", "score": -0.0014894008634698253}]}
{"index": 16, "beams": [{"orig_question": "What is the maximum capacity and the average of all stadiums ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Max(stadium.Capacity), Avg(stadium.Average) FROM stadium", "score": -0.003917482419637963}]}
{"index": 17, "beams": [{"orig_question": "What is the average and maximum capacities for all stadiums ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(stadium.Average), Max(stadium.Capacity) FROM stadium", "score": -0.0011533498763682815}]}
{"index": 18, "beams": [{"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average Desc LIMIT 1", "score": -0.010754585266049332}]}
{"index": 19, "beams": [{"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average Desc LIMIT 1", "score": -0.007982015609563575}]}
{"index": 20, "beams": [{"orig_question": "How many concerts are there in year 2014 or 2015?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM concert WHERE concert.Year = 'terminal' OR concert.Year = 'terminal'", "score": -0.004136323928818797}]}
{"index": 21, "beams": [{"orig_question": "How many concerts occurred in 2014 or 2015?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM concert WHERE concert.Year = 'terminal' OR concert.Year = 'terminal'", "score": -0.0017819404601411293}]}
{"index": 22, "beams": [{"orig_question": "Show the stadium name and the number of concerts in each stadium.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, Count(*) FROM stadium JOIN concert GROUP BY concert.Stadium_ID", "score": -0.0009830650160154164}]}
{"index": 23, "beams": [{"orig_question": "For each stadium, how many concerts play there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, Count(*) FROM stadium JOIN concert GROUP BY concert.Stadium_ID", "score": -0.08458654776370622}]}
{"index": 24, "beams": [{"orig_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert WHERE concert.Year >= 'terminal' GROUP BY concert.Stadium_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.019687875173588054}]}
{"index": 25, "beams": [{"orig_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert WHERE concert.Year > 'terminal' GROUP BY concert.Stadium_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.0015638774468627048}]}
{"index": 26, "beams": [{"orig_question": "Which year has most number of concerts?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004329681396484375}]}
{"index": 27, "beams": [{"orig_question": "What is the year that had the most concerts?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004302263259816641}]}
{"index": 28, "beams": [{"orig_question": "Show the stadium names without any concert.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)", "score": -0.000806093215928172}]}
{"index": 29, "beams": [{"orig_question": "What are the names of the stadiums without any concerts?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)", "score": -0.0008434057235362502}]}
{"index": 30, "beams": [{"orig_question": "Show countries where a singer above age 40 and a singer below 30 are from.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Country FROM singer WHERE singer.Age > 'terminal' INTERSECT SELECT singer.Country FROM singer WHERE singer.Age < 'terminal'", "score": -0.0014489889144684298}]}
{"index": 31, "beams": [{"orig_question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert WHERE concert.Year = 'terminal'", "score": -0.0015233703888810624}]}
{"index": 32, "beams": [{"orig_question": "What are the names of all stadiums that did not have a concert in 2014?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 'terminal')", "score": -0.007495284080469844}]}
{"index": 33, "beams": [{"orig_question": "Show the name and theme for all concerts and the number of singers in each concert.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT concert.concert_Name, concert.Theme, Count(*) FROM concert JOIN singer_in_concert GROUP BY concert.concert_ID", "score": -0.03412021323509151}]}
{"index": 34, "beams": [{"orig_question": "What are the names , themes , and number of singers for every concert ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT concert.concert_Name, concert.Theme, Count(*) FROM concert JOIN singer_in_concert GROUP BY concert.concert_ID", "score": -0.04691691805959408}]}
{"index": 35, "beams": [{"orig_question": "List singer names and number of concerts for each singer.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT singer.Name, Count(*) FROM singer JOIN singer_in_concert GROUP BY singer_in_concert.Singer_ID", "score": -0.5286086647709567}]}
{"index": 36, "beams": [{"orig_question": "What are the names of the singers and number of concerts for each person?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT singer.Name, Count(*) FROM singer JOIN singer_in_concert GROUP BY singer.Singer_ID", "score": -0.0008320708819766764}]}
{"index": 37, "beams": [{"orig_question": "List all singer names in concerts in year 2014.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN concert JOIN singer WHERE concert.Year = 'terminal'", "score": -0.03536137791521554}]}
{"index": 38, "beams": [{"orig_question": "What are the names of the singers who performed in a concert in 2014?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN concert JOIN singer WHERE concert.Year = 'terminal'", "score": -0.046411371392650835}]}
{"index": 39, "beams": [{"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE 'terminal'", "score": -0.0005352495281556457}]}
{"index": 40, "beams": [{"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE 'terminal'", "score": -0.0005517005865840474}]}
{"index": 41, "beams": [{"orig_question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, stadium.Location FROM stadium JOIN concert WHERE concert.Year = 'terminal' INTERSECT SELECT stadium.Name, stadium.Location FROM stadium JOIN concert WHERE concert.Year = 'terminal'", "score": -0.009627330813280821}]}
{"index": 42, "beams": [{"orig_question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT stadium.Name, stadium.Location FROM stadium JOIN concert WHERE concert.Year = 'terminal' INTERSECT SELECT stadium.Name, stadium.Location FROM stadium JOIN concert WHERE concert.Year = 'terminal'", "score": -0.0028730299676951176}]}
{"index": 43, "beams": [{"orig_question": "Find the number of concerts happened in the stadium with the highest capacity .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM stadium WHERE stadium.Capacity = (SELECT Max(stadium.Capacity) FROM stadium)", "score": -0.5418215198477014}]}
{"index": 44, "beams": [{"orig_question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM concert JOIN stadium WHERE stadium.Capacity = (SELECT Max(stadium.Capacity) FROM stadium)", "score": -0.27754750695999064}]}
{"index": 45, "beams": [{"orig_question": "Find the number of pets whose weight is heavier than 10.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Pets WHERE Pets.weight > 'terminal'", "score": -0.0003778934476201812}]}
{"index": 46, "beams": [{"orig_question": "How many pets have a greater weight than 10?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Pets WHERE Pets.weight > 'terminal'", "score": -0.0003836154927441271}]}
{"index": 47, "beams": [{"orig_question": "Find the weight of the youngest dog.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'terminal' ORDER BY Pets.pet_age Asc LIMIT 1", "score": -0.006742692899706526}]}
{"index": 48, "beams": [{"orig_question": "How much does the youngest dog weigh?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'terminal' ORDER BY Pets.pet_age Asc LIMIT 1", "score": -0.04098442383109813}]}
{"index": 49, "beams": [{"orig_question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Max(Pets.weight), Pets.PetType FROM Pets GROUP BY Pets.PetType", "score": -0.34768080711046423}]}
{"index": 50, "beams": [{"orig_question": "List the maximum weight and type for each type of pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Max(Pets.PetType), Pets.PetType FROM Pets GROUP BY Pets.PetType", "score": -1.2405928290281736}]}
{"index": 51, "beams": [{"orig_question": "Find number of pets owned by students who are older than 20.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Student JOIN Has_Pet JOIN Pets WHERE Student.Age > 'terminal'", "score": -0.4991819673887221}]}
{"index": 52, "beams": [{"orig_question": "How many pets are owned by students that have an age greater than 20?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Pets JOIN Has_Pet JOIN Student WHERE Student.Age > 'terminal'", "score": -0.1664786479614122}]}
{"index": 53, "beams": [{"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Pets JOIN Has_Pet JOIN Student WHERE Student.Sex = 'terminal' AND Pets.PetType = 'terminal'", "score": -0.005252458651028746}]}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Pets JOIN Has_Pet JOIN Student WHERE Student.Sex = 'terminal' AND Pets.PetType = 'terminal'", "score": -0.008110353741358267}]}
{"index": 55, "beams": [{"orig_question": "Find the number of distinct type of pets.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT Pets.PetType) FROM Pets", "score": -0.00017857551506494929}]}
{"index": 56, "beams": [{"orig_question": "How many different types of pet are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT Pets.PetType) FROM Pets", "score": -0.0002039670940803262}]}
{"index": 57, "beams": [{"orig_question": "Find the first name of students who have cat or dog pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Fname FROM Has_Pet JOIN Pets JOIN Student WHERE Pets.PetType = 'terminal' OR Pets.PetType = 'terminal'", "score": -0.3798863943665083}]}
{"index": 58, "beams": [{"orig_question": "What are the first names of every student who has a cat or dog as a pet?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Student.Fname FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal' OR Pets.PetType = 'terminal'", "score": -0.2797044644721609}]}
{"index": 59, "beams": [{"orig_question": "Find the first name of students who have both cat and dog pets .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Fname FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal' INTERSECT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal')", "score": -0.9462277451930277}]}
{"index": 60, "beams": [{"orig_question": "What are the students' first names who have both cats and dogs as pets?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Student.Fname FROM Student JOIN Pets WHERE Pets.PetType = 'terminal' INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet WHERE Pets.PetType = 'terminal'", "score": -0.8959750460198208}]}
{"index": 61, "beams": [{"orig_question": "Find the major and age of students who do not have a cat pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet WHERE Pets.PetType = 'terminal')", "score": -0.2541327476489883}]}
{"index": 62, "beams": [{"orig_question": "What major is every student who does not own a cat as a pet, and also how old are they?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal')", "score": -0.025772583387073666}]}
{"index": 63, "beams": [{"orig_question": "Find the id of students who do not have a cat pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal'", "score": -0.06005686963998613}]}
{"index": 64, "beams": [{"orig_question": "What are the ids of the students who do not own cats as pets?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal'", "score": -0.029456277385172314}]}
{"index": 65, "beams": [{"orig_question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal' EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = 'terminal')", "score": -0.3462360709866914}]}
{"index": 66, "beams": [{"orig_question": "What is the first name of every student who has a dog but does not have a cat?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Student.Fname FROM Student JOIN Pets EXCEPT SELECT Student.Fname FROM Student JOIN Has_Pet WHERE Pets.PetType = 'terminal'", "score": -0.1928800073947059}]}
{"index": 67, "beams": [{"orig_question": "Find the type and weight of the youngest pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age Asc LIMIT 1", "score": -0.012595879727648196}]}
{"index": 68, "beams": [{"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight Asc LIMIT 1", "score": -0.04478570722852737}]}
{"index": 69, "beams": [{"orig_question": "Find the id and weight of all pets whose age is older than 1.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 'terminal'", "score": -0.00039160251299108495}]}
{"index": 70, "beams": [{"orig_question": "What is the id and weight of every pet who is older than 1?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 'terminal'", "score": -0.0003933906500606099}]}
{"index": 71, "beams": [{"orig_question": "Find the average and maximum age for each type of pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Avg(Pets.pet_age), Max(Pets.pet_age) FROM Pets GROUP BY Pets.PetType", "score": -0.06834530829814867}]}
{"index": 72, "beams": [{"orig_question": "What is the average and maximum age for each pet type?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Avg(Pets.pet_age), Max(Pets.pet_age) FROM Pets GROUP BY Pets.PetType", "score": -0.008440494536749554}]}
{"index": 73, "beams": [{"orig_question": "Find the average weight for each pet type.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Avg(Pets.weight) FROM Pets GROUP BY Pets.PetType", "score": -0.0010083913802532152}]}
{"index": 74, "beams": [{"orig_question": "What is the average weight for each type of pet?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Pets.PetType, Avg(Pets.weight) FROM Pets GROUP BY Pets.PetType", "score": -0.003079533574918969}]}
{"index": 75, "beams": [{"orig_question": "Find the first name and age of students who have a pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -0.015034350938535113}]}
{"index": 76, "beams": [{"orig_question": "What are the different first names and ages of the students who do have pets?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -0.8067343663060171}]}
{"index": 77, "beams": [{"orig_question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Has_Pet.PetID FROM Has_Pet JOIN Student WHERE Student.LName = 'terminal'", "score": -0.0025562259106663987}]}
{"index": 78, "beams": [{"orig_question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Has_Pet.PetID FROM Has_Pet JOIN Student WHERE Student.LName = 'terminal'", "score": -0.0003583422467272612}]}
{"index": 79, "beams": [{"orig_question": "Find the number of pets for each student who has any pet and student id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID", "score": -0.44077301071956754}]}
{"index": 80, "beams": [{"orig_question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Has_Pet.StuID, Count(*) FROM Student JOIN Has_Pet GROUP BY Has_Pet.StuID", "score": -0.10795366873935563}]}
{"index": 81, "beams": [{"orig_question": "Find the first name and gender of student who have more than one pet.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet GROUP BY Has_Pet.StuID HAVING Count(*) > 'terminal'", "score": -0.0020221445455419484}]}
{"index": 82, "beams": [{"orig_question": "What is the first name and gender of the all the students who have more than one pet?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet GROUP BY Has_Pet.StuID HAVING Count(*) > 'terminal'", "score": -0.010743787020111029}]}
{"index": 83, "beams": [{"orig_question": "Find the last name of the student who has a cat that is age 3.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Student.LName FROM Student WHERE Student.Age = 'terminal' INTERSECT SELECT Student.LName FROM Student JOIN Has_Pet WHERE Pets.pet_age = 'terminal'", "score": -1.9311602376398866}]}
{"index": 84, "beams": [{"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet WHERE Student.Age = 'terminal' INTERSECT SELECT Student.LName FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.pet_age = 'terminal'", "score": -0.5821364685666524}]}
{"index": 85, "beams": [{"orig_question": "Find the average age of students who do not have any pet .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -0.001190185542036204}]}
{"index": 86, "beams": [{"orig_question": "What is the average age for all students who do not own any pets ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -0.0012106894843881832}]}
{"index": 87, "beams": [{"orig_question": "How many continents are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM continents", "score": -0.016076732426824947}]}
{"index": 88, "beams": [{"orig_question": "What is the number of continents?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM continents", "score": -0.0018839846557057172}]}
{"index": 89, "beams": [{"orig_question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT cars_data.Id, continents.Continent, Count(*) FROM cars_data JOIN continents GROUP BY cars_data.Id", "score": -7.2792591592130975}]}
{"index": 90, "beams": [{"orig_question": "For each continent, list its id, name, and how many countries it has?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT countries.Continent, countries.CountryName, Count(*) FROM countries JOIN continents GROUP BY countries.Continent", "score": -0.6870809174487249}]}
{"index": 91, "beams": [{"orig_question": "How many countries are listed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM countries", "score": -0.00019812583900602476}]}
{"index": 92, "beams": [{"orig_question": "How many countries exist?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM countries", "score": -0.00019097328183192985}]}
{"index": 93, "beams": [{"orig_question": "How many models does each car maker produce? List maker full name, id and the number.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT car_makers.FullName, car_makers.FullName, Count(*) FROM car_makers JOIN model_list GROUP BY car_makers.Maker", "score": -0.8646406531292428}]}
{"index": 94, "beams": [{"orig_question": "What is the full name of each car maker, along with its id and how many models it produces?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT car_makers.Maker, car_makers.FullName, Count(*) FROM car_makers JOIN model_list GROUP BY car_makers.Id", "score": -0.009166845818810998}]}
{"index": 95, "beams": [{"orig_question": "Which model of the car has the minimum horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN cars_data JOIN model_list ORDER BY cars_data.Horsepower Asc LIMIT 1", "score": -4.365654446363351}]}
{"index": 96, "beams": [{"orig_question": "What is the model of the car with the smallest amount of horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN cars_data JOIN model_list ORDER BY cars_data.Horsepower Asc LIMIT 1", "score": -1.9046119659324106}]}
{"index": 97, "beams": [{"orig_question": "Find the model of the car whose weight is below the average weight.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM cars_data JOIN model_list WHERE cars_data.Weight < (SELECT Avg(cars_data.Weight) FROM cars_data)", "score": -0.30172979741266204}]}
{"index": 98, "beams": [{"orig_question": "What is the model for the car with a weight smaller than the average?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN cars_data WHERE cars_data.Weight < (SELECT Avg(cars_data.Weight) FROM cars_data)", "score": -0.5612602150060866}]}
{"index": 99, "beams": [{"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT car_makers.Maker FROM cars_data JOIN car_makers WHERE cars_data.Year = 'terminal'", "score": -1.1959546208381653}]}
{"index": 100, "beams": [{"orig_question": "What is the name of the different car makers who produced a car in 1970?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT car_makers.Maker FROM car_makers JOIN model_list JOIN cars_data WHERE cars_data.Year = 'terminal'", "score": -0.9045664883451536}]}
{"index": 101, "beams": [{"orig_question": "Find the make and production time of the cars that were produced in the earliest year?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ORDER BY cars_data.Year Asc LIMIT 1", "score": -0.149989064013198}]}
{"index": 102, "beams": [{"orig_question": "What is the maker of the carr produced in the earliest year and what year was it?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_makers ORDER BY cars_data.Year Asc LIMIT 1", "score": -0.6125116964103654}]}
{"index": 103, "beams": [{"orig_question": "Which distinct car models are the produced after 1980?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT DISTINCT model_list.Model FROM car_names JOIN model_list JOIN cars_data WHERE cars_data.Year > 'terminal'", "score": -7.974855046405082}]}
{"index": 104, "beams": [{"orig_question": "What are the different models for the cards produced after 1980?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE cars_data.Year > 'terminal'", "score": -0.0034497967424726994}]}
{"index": 105, "beams": [{"orig_question": "How many car makers are there in each continents? List the continent name and the count.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT continents.Continent, Count(*) FROM continents JOIN countries GROUP BY continents.Continent", "score": -1.273628004170405}]}
{"index": 106, "beams": [{"orig_question": "What is the name of each continent and how many car makers are there in each one?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT continents.Continent, Count(*) FROM continents JOIN countries JOIN car_makers GROUP BY continents.Continent", "score": -0.025487170460095854}]}
{"index": 107, "beams": [{"orig_question": "Which of the countries has the most car makers? List the country name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countries.CountryName FROM countries JOIN car_makers GROUP BY car_makers.Country ORDER BY Count(*) Desc LIMIT 1", "score": -0.0012690470466552028}]}
{"index": 108, "beams": [{"orig_question": "What is the name of the country with the most car makers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countries.CountryName FROM countries JOIN car_makers GROUP BY car_makers.Country ORDER BY Count(*) Desc LIMIT 1", "score": -0.04014215062244375}]}
{"index": 109, "beams": [{"orig_question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*), car_makers.FullName, Count(*) FROM car_makers JOIN model_list GROUP BY car_makers.Maker", "score": -0.6638472373596755}]}
{"index": 110, "beams": [{"orig_question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*), car_makers.FullName, car_makers.FullName FROM car_makers JOIN model_list GROUP BY car_makers.Id", "score": -1.3287324613761413}]}
{"index": 111, "beams": [{"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data WHERE car_names.Make = 'terminal'", "score": -0.0005935286171734333}]}
{"index": 112, "beams": [{"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Accelerate FROM car_names JOIN cars_data WHERE car_names.Make = 'terminal'", "score": -0.07696761560509913}]}
{"index": 113, "beams": [{"orig_question": "How many car makers are there in france?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM car_makers JOIN countries WHERE countries.CountryName = 'terminal'", "score": -0.002546962955420895}]}
{"index": 114, "beams": [{"orig_question": "What is the number of makers of care in France?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM car_makers JOIN countries WHERE countries.CountryName = 'terminal'", "score": -0.02633477869676426}]}
{"index": 115, "beams": [{"orig_question": "How many car models are produced in the usa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM model_list", "score": -0.0012091419775401846}]}
{"index": 116, "beams": [{"orig_question": "What is the count of the car models produced in the United States?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM car_makers JOIN countries WHERE countries.CountryName = 'terminal'", "score": -0.10560804697297499}]}
{"index": 117, "beams": [{"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal'", "score": -0.0003243684768676758}]}
{"index": 118, "beams": [{"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal'", "score": -0.00037014484404807035}]}
{"index": 119, "beams": [{"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Min(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 'terminal' AND cars_data.Cylinders = 'terminal'", "score": -0.03076325371148414}]}
{"index": 120, "beams": [{"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Min(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 'terminal' AND cars_data.Cylinders = 'terminal'", "score": -0.04333424966898747}]}
{"index": 121, "beams": [{"orig_question": "What are all the makers and models?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -0.000316619873046875}]}
{"index": 122, "beams": [{"orig_question": "What are the makers and models?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -0.00024235248564963285}]}
{"index": 123, "beams": [{"orig_question": "What are the countries having at least one car maker? List name and id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT countries.CountryName, car_makers.Id FROM car_makers JOIN countries", "score": -0.032945621758017296}]}
{"index": 124, "beams": [{"orig_question": "What are the names and ids of all countries with at least one car maker?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT DISTINCT countries.CountryName, car_makers.Id FROM countries JOIN car_makers", "score": -0.07957272976454988}]}
{"index": 125, "beams": [{"orig_question": "What is the number of the cars with horsepower more than 150?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Horsepower > 'terminal'", "score": -0.00042295454358054485}]}
{"index": 126, "beams": [{"orig_question": "What is the number of cars with a horsepower greater than 150?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Horsepower > 'terminal'", "score": -0.00037312507251385796}]}
{"index": 127, "beams": [{"orig_question": "What is the average weight of cars each year?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -0.0008586645125774339}]}
{"index": 128, "beams": [{"orig_question": "What is the average weight and year for each year?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.Weight), Avg(cars_data.Year), cars_data.Year FROM cars_data GROUP BY cars_data.Year", "score": -0.08383835107087378}]}
{"index": 129, "beams": [{"orig_question": "Which countries in europe have at least 3 car manufacturers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT countries.CountryName FROM countries JOIN continents WHERE continents.Continent = 'terminal' GROUP BY countries.CountryName HAVING Count(*) >= 'terminal'", "score": -0.29124416131423914}]}
{"index": 130, "beams": [{"orig_question": "What are the names of all European countries with at least 3 manufacturers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT countries.CountryName FROM countries JOIN continents GROUP BY countries.CountryName HAVING Count(*) >= 'terminal'", "score": -1.0504376945264084}]}
{"index": 131, "beams": [{"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Max(cars_data.Horsepower), Max(car_names.Make) FROM cars_data JOIN car_names WHERE cars_data.Cylinders = 'terminal'", "score": -11.020567144267254}]}
{"index": 132, "beams": [{"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Max(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names WHERE cars_data.Cylinders = 'terminal'", "score": -10.496495955157968}]}
{"index": 133, "beams": [{"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN model_list JOIN cars_data ORDER BY cars_data.MPG Desc LIMIT 1", "score": -1.2660660622141222}]}
{"index": 134, "beams": [{"orig_question": "What is the car model with the highest mpg ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN model_list JOIN cars_data ORDER BY cars_data.MPG Desc LIMIT 1", "score": -0.22002874332247302}]}
{"index": 135, "beams": [{"orig_question": "What is the average horsepower of the cars before 1980?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 'terminal'", "score": -0.0006152391433644766}]}
{"index": 136, "beams": [{"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 'terminal'", "score": -0.0006362199783254141}]}
{"index": 137, "beams": [{"orig_question": "What is the average edispl of the cars of model volvo?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Avg(cars_data.Edispl) FROM car_names JOIN cars_data JOIN model_list WHERE model_list.Model = 'terminal'", "score": -0.2581105405697599}]}
{"index": 138, "beams": [{"orig_question": "What is the average edispl for all volvos?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Avg(cars_data.Edispl) FROM cars_data JOIN car_names WHERE car_names.Make = 'terminal'", "score": -7.440875796601176}]}
{"index": 139, "beams": [{"orig_question": "What is the maximum accelerate for different number of cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Max(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -0.0008084773171432857}]}
{"index": 140, "beams": [{"orig_question": "What is the maximum accelerate for all the different cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Max(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders", "score": -0.002071420532956836}]}
{"index": 141, "beams": [{"orig_question": "Which model has the most version(make) of cars?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM car_names JOIN model_list GROUP BY car_names.Model ORDER BY Count(*) Desc LIMIT 1", "score": -0.0030862149648100967}]}
{"index": 142, "beams": [{"orig_question": "What model has the most different versions?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY Count(*) Desc LIMIT 1", "score": -0.007548311579739675}]}
{"index": 143, "beams": [{"orig_question": "How many cars have more than 4 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'", "score": -0.0005702932539293215}]}
{"index": 144, "beams": [{"orig_question": "What is the number of cars with more than 4 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'", "score": -0.00045967101766564156}]}
{"index": 145, "beams": [{"orig_question": "how many cars were produced in 1980?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Year = 'terminal'", "score": -0.0002154111521122104}]}
{"index": 146, "beams": [{"orig_question": "In 1980, how many cars were made?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Year = 'terminal'", "score": -0.00022315941347983426}]}
{"index": 147, "beams": [{"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM car_makers JOIN model_list WHERE car_makers.FullName = 'terminal'", "score": -0.00040876864562733317}]}
{"index": 148, "beams": [{"orig_question": "What is the number of car models created by the car maker American Motor Company?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM car_makers JOIN model_list WHERE car_makers.Maker = 'terminal'", "score": -0.09893348064178298}]}
{"index": 149, "beams": [{"orig_question": "Which makers designed more than 3 car models? List full name and the id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT car_makers.FullName, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list GROUP BY car_makers.Id HAVING Count(*) > 'terminal'", "score": -0.045271312177632694}]}
{"index": 150, "beams": [{"orig_question": "What are the names and ids of all makers with more than 3 models?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list GROUP BY car_makers.Id HAVING Count(*) > 'terminal'", "score": -0.2682752291629811}]}
{"index": 151, "beams": [{"orig_question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list JOIN cars_data WHERE car_makers.FullName = 'terminal' OR cars_data.Weight > 'terminal'", "score": -12.566418409322921}]}
{"index": 152, "beams": [{"orig_question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list JOIN cars_data WHERE car_makers.FullName = 'terminal' OR cars_data.Weight > 'terminal'", "score": -9.725222532171749}]}
{"index": 153, "beams": [{"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 'terminal' AND 'terminal'", "score": -0.0027917623494886357}]}
{"index": 154, "beams": [{"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 'terminal' INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 'terminal'", "score": -0.0018726587289208396}]}
{"index": 155, "beams": [{"orig_question": "What is the horsepower of the car with the largest accelerate?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate Desc LIMIT 1", "score": -0.0004141330718852032}]}
{"index": 156, "beams": [{"orig_question": "What is the horsepower of the car with the greatest accelerate?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate Desc LIMIT 1", "score": -0.00037789344784755485}]}
{"index": 157, "beams": [{"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names JOIN model_list WHERE car_names.Model = 'terminal' ORDER BY cars_data.Accelerate Asc LIMIT 1", "score": -0.856362008023666}]}
{"index": 158, "beams": [{"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT cars_data.Cylinders FROM car_names JOIN cars_data JOIN model_list WHERE model_list.Model = 'terminal' ORDER BY cars_data.Accelerate Asc LIMIT 1", "score": -0.2973720920260803}]}
{"index": 159, "beams": [{"orig_question": "How many cars have a larger accelerate than the car with the largest horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)", "score": -0.004624939392321892}]}
{"index": 160, "beams": [{"orig_question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)", "score": -0.010356187604884326}]}
{"index": 161, "beams": [{"orig_question": "How many countries has more than 2 car makers ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "TableUnitSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}]}}, "inferred_code": "SELECT Count(*) FROM (SELECT countries.CountryName FROM car_makers GROUP BY car_makers.Country HAVING Count(*) > 'terminal')", "score": -0.6522387198653519}]}
{"index": 162, "beams": [{"orig_question": "What is the number of countries with more than 2 car makers ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "TableUnitSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}}]}}, "inferred_code": "SELECT Count(*) FROM (SELECT countries.CountryName FROM car_makers JOIN countries GROUP BY car_makers.Country HAVING Count(*) > 'terminal')", "score": -0.2005799883554502}]}
{"index": 163, "beams": [{"orig_question": "How many cars has over 6 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'", "score": -0.0009812210045652137}]}
{"index": 164, "beams": [{"orig_question": "What is the number of carsw ith over 6 cylinders?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM cars_data WHERE cars_data.Cylinders > 'terminal'", "score": -0.001572012897177899}]}
{"index": 165, "beams": [{"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT car_names.Model FROM car_names JOIN cars_data WHERE cars_data.Cylinders = 'terminal' ORDER BY cars_data.Horsepower Desc LIMIT 1", "score": -9.347982615232468}]}
{"index": 166, "beams": [{"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM cars_data JOIN model_list WHERE cars_data.Cylinders = 'terminal' ORDER BY cars_data.Horsepower Desc LIMIT 1", "score": -11.983162462711334}]}
{"index": 167, "beams": [{"orig_question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 4}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data WHERE cars_data.Horsepower > 'terminal' EXCEPT SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names WHERE cars_data.Cylinders > 'terminal'", "score": -0.5616734971640653}]}
{"index": 168, "beams": []}
{"index": 169, "beams": [{"orig_question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Max(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal' OR cars_data.Year < 'terminal'", "score": -0.005811840685026937}]}
{"index": 170, "beams": [{"orig_question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Max(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 'terminal' OR cars_data.Year < 'terminal'", "score": -0.02293577557605886}]}
{"index": 171, "beams": [{"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM car_makers JOIN model_list WHERE cars_data.Weight > 'terminal' EXCEPT SELECT model_list.Model FROM car_makers JOIN model_list WHERE car_makers.Maker = 'terminal'", "score": -0.485112920224509}]}
{"index": 172, "beams": [{"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT model_list.Model FROM car_makers JOIN model_list WHERE cars_data.Weight > 'terminal' EXCEPT SELECT model_list.Model FROM car_makers JOIN model_list WHERE car_makers.Maker = 'terminal'", "score": -0.6872275182595899}]}
{"index": 173, "beams": [{"orig_question": "What are the name of the countries where there is not a single car maker?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT countries.CountryName FROM countries EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers", "score": -0.004625678028645552}]}
{"index": 174, "beams": [{"orig_question": "What are the names of the countries with no car makers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT countries.CountryName FROM countries EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers", "score": -0.032365916836397446}]}
{"index": 175, "beams": [{"orig_question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list GROUP BY car_makers.Id HAVING Count(*) >= 'terminal' INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list GROUP BY car_makers.Id HAVING Count(*) > 'terminal'", "score": -0.0665297637133051}]}
{"index": 176, "beams": [{"orig_question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names GROUP BY car_makers.Id HAVING Count(*) >= 'terminal' INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list GROUP BY car_makers.Id HAVING Count(*) > 'terminal'", "score": -0.02941146232988956}]}
{"index": 177, "beams": [{"orig_question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "union": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN model_list GROUP BY countries.CountryId HAVING Count(*) > 'terminal' UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers JOIN model_list WHERE car_makers.Maker = 'terminal'", "score": -3.1809041717660307}]}
{"index": 178, "beams": [{"orig_question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "union": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN model_list GROUP BY countries.CountryId HAVING Count(*) > 'terminal' UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers WHERE model_list.Model = 'terminal'", "score": -0.8413930253582294}]}
{"index": 179, "beams": [{"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'terminal'", "score": -0.0001468658447265625}]}
{"index": 180, "beams": [{"orig_question": "What country is Jetblue Airways affiliated with?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'terminal'", "score": -0.0001524686809943887}]}
{"index": 181, "beams": [{"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'terminal'", "score": -0.000156402587890625}]}
{"index": 182, "beams": [{"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'terminal'", "score": -0.00018310546875}]}
{"index": 183, "beams": [{"orig_question": "List all airline names and their abbreviations in \"USA\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'terminal'", "score": -0.0002841949462890625}]}
{"index": 184, "beams": [{"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'terminal'", "score": -0.0002460479736328125}]}
{"index": 185, "beams": [{"orig_question": "List the airport code and name in the city of Anthony.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'terminal'", "score": -0.0002872943871352618}]}
{"index": 186, "beams": [{"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'terminal'", "score": -0.00024807453154807035}]}
{"index": 187, "beams": [{"orig_question": "How many airlines do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM airlines", "score": -0.00020825862878837142}]}
{"index": 188, "beams": [{"orig_question": "What is the total number of airlines?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM airlines", "score": -0.0001879930496144766}]}
{"index": 189, "beams": [{"orig_question": "How many airports do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM airports", "score": -0.0002435445776427514}]}
{"index": 190, "beams": [{"orig_question": "Return the number of  airports.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM airports", "score": -0.00020682811702954496}]}
{"index": 191, "beams": [{"orig_question": "How many flights do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights", "score": -0.0002700090290090884}]}
{"index": 192, "beams": [{"orig_question": "Return the number of flights.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights", "score": -0.0001955032344085339}]}
{"index": 193, "beams": [{"orig_question": "Which airline has abbreviation 'UAL'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'terminal'", "score": -0.00017547595780342817}]}
{"index": 194, "beams": [{"orig_question": "Give the airline with abbreviation 'UAL'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'terminal'", "score": -0.02626362256705761}]}
{"index": 195, "beams": [{"orig_question": "How many airlines are from USA?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM airlines WHERE airlines.Country = 'terminal'", "score": -0.00019502639719348736}]}
{"index": 196, "beams": [{"orig_question": "Return the number of airlines in the USA.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM airlines WHERE airlines.Country = 'terminal'", "score": -0.00019669532773036735}]}
{"index": 197, "beams": [{"orig_question": "Which city and country is the Alton airport at?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'terminal'", "score": -0.00025844573974609375}]}
{"index": 198, "beams": [{"orig_question": "Give the city and country for the Alton airport.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'terminal'", "score": -0.0035556599032062763}]}
{"index": 199, "beams": [{"orig_question": "What is the airport name for airport 'AKO'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'terminal'", "score": -0.0001461505889608361}]}
{"index": 200, "beams": [{"orig_question": "Return the name of the airport with code 'AKO'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'terminal'", "score": -0.00014400482177734375}]}
{"index": 201, "beams": [{"orig_question": "What are airport names at City 'Aberdeen'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = 'terminal'", "score": -0.0001430511474609375}]}
{"index": 202, "beams": [{"orig_question": "What are the names of airports in Aberdeen?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = 'terminal'", "score": -0.00013828277587890625}]}
{"index": 203, "beams": [{"orig_question": "How many flights depart from 'APG'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.0002911083222443267}]}
{"index": 204, "beams": [{"orig_question": "Count the number of flights departing from 'APG'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.00026559754735444585}]}
{"index": 205, "beams": [{"orig_question": "How many flights have destination ATO?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights WHERE flights.DestAirport = 'terminal'", "score": -0.00023591514081999776}]}
{"index": 206, "beams": [{"orig_question": "Count the number of flights into ATO.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.0002181529143285843}]}
{"index": 207, "beams": [{"orig_question": "How many flights depart from City Aberdeen?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.00990650057019593}]}
{"index": 208, "beams": [{"orig_question": "Return the number of flights departing from Aberdeen.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.0005205777199535078}]}
{"index": 209, "beams": [{"orig_question": "How many flights arriving in Aberdeen city?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.045012034474325446}]}
{"index": 210, "beams": [{"orig_question": "Return the number of flights arriving in Aberdeen.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.005427922119793038}]}
{"index": 211, "beams": [{"orig_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal' AND airports.City = 'terminal'", "score": -0.0007807011260680952}]}
{"index": 212, "beams": [{"orig_question": "How many flights fly from Aberdeen to Ashley?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal' AND airports.AirportName = 'terminal'", "score": -0.10593158443217021}]}
{"index": 213, "beams": [{"orig_question": "How many flights does airline 'JetBlue Airways' have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'", "score": -0.005158802319755296}]}
{"index": 214, "beams": [{"orig_question": "Give the number of Jetblue Airways flights.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'", "score": -0.0022528043725742464}]}
{"index": 215, "beams": [{"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights WHERE airlines.Airline = 'terminal' AND flights.DestAirport = 'terminal'", "score": -0.19585279297734814}]}
{"index": 216, "beams": [{"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal' AND flights.Airline = 'terminal'", "score": -0.8415452595609167}]}
{"index": 217, "beams": [{"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.Country = 'terminal' AND flights.SourceAirport = 'terminal'", "score": -6.883710488240467}]}
{"index": 218, "beams": [{"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.Country = 'terminal' AND flights.Airline = 'terminal'", "score": -9.538030357391108}]}
{"index": 219, "beams": [{"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights JOIN airports WHERE airports.City = 'terminal' AND airlines.Airline = 'terminal'", "score": -0.4393193530049757}]}
{"index": 220, "beams": [{"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM airlines JOIN flights JOIN airports WHERE airports.City = 'terminal' AND flights.Airline = 'terminal'", "score": -0.6989929400450023}]}
{"index": 221, "beams": [{"orig_question": "Which city has most number of arriving flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airports.City FROM airports JOIN flights GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1", "score": -0.11440140753973083}]}
{"index": 222, "beams": [{"orig_question": "Which city has the most frequent destination airport?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airports.City FROM airports JOIN flights GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1", "score": -0.022807359677692318}]}
{"index": 223, "beams": [{"orig_question": "Which city has most number of departing flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airports.City FROM airports JOIN flights GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1", "score": -0.07152913507773917}]}
{"index": 224, "beams": [{"orig_question": "Which city is the most frequent source airport?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.City FROM airports GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004340410232472891}]}
{"index": 225, "beams": [{"orig_question": "What is the code of airport that has the highest number of flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM flights JOIN airports GROUP BY airports.AirportName ORDER BY Count(*) Desc LIMIT 1", "score": -5.021684221761461}]}
{"index": 226, "beams": [{"orig_question": "What is the airport code of the airport with the most flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportCode FROM flights JOIN airports GROUP BY flights.SourceAirport ORDER BY Count(*) Desc LIMIT 1", "score": -1.218241036955078}]}
{"index": 227, "beams": [{"orig_question": "What is the code of airport that has fewest number of flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportCode FROM flights JOIN airports GROUP BY flights.SourceAirport ORDER BY Count(*) Asc LIMIT 1", "score": -6.557168372852175}]}
{"index": 228, "beams": [{"orig_question": "Give the code of the airport with the least flights.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airports.AirportCode FROM airports JOIN flights GROUP BY flights.SourceAirport ORDER BY Count(*) Asc LIMIT 1", "score": -4.9711820874254045}]}
{"index": 229, "beams": [{"orig_question": "Which airline has most number of flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY Count(*) Desc LIMIT 1", "score": -0.007045902544632554}]}
{"index": 230, "beams": [{"orig_question": "What airline serves the most flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY Count(*) Desc LIMIT 1", "score": -0.02884343335790618}]}
{"index": 231, "beams": [{"orig_question": "Find the abbreviation and country of the airline that has fewest number of flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline, airlines.Country FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY Count(*) Asc LIMIT 1", "score": -0.5965961899661352}]}
{"index": 232, "beams": [{"orig_question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights GROUP BY airlines.Abbreviation ORDER BY Count(*) Asc LIMIT 1", "score": -2.087321159373232}]}
{"index": 233, "beams": [{"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'", "score": -0.2771964353405565}]}
{"index": 234, "beams": [{"orig_question": "Which airlines have a flight with source airport AHD?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'", "score": -5.835267917893361}]}
{"index": 235, "beams": [{"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'", "score": -0.05251094532229672}]}
{"index": 236, "beams": [{"orig_question": "Which airlines have a flight with destination airport AHD?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.DestAirport = 'terminal'", "score": -0.1985003280606179}]}
{"index": 237, "beams": [{"orig_question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights WHERE flights.SourceAirport = 'terminal'", "score": -0.0026063822713808804}]}
{"index": 238, "beams": [{"orig_question": "Which airlines have departing flights from both APG and CVO airports?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines WHERE flights.SourceAirport = 'terminal' INTERSECT SELECT airlines.Airline FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.10911138093581485}]}
{"index": 239, "beams": [{"orig_question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines WHERE flights.SourceAirport = 'terminal' EXCEPT SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.06997756560190282}]}
{"index": 240, "beams": [{"orig_question": "Which airlines have departures from CVO but not from APG airports?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines WHERE flights.SourceAirport = 'terminal' EXCEPT SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.12656123034685152}]}
{"index": 241, "beams": [{"orig_question": "Find all airlines that have at least 10 flights.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) >= 'terminal'", "score": -0.4153932426124811}]}
{"index": 242, "beams": [{"orig_question": "Which airlines have at least 10 flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY airlines.uid HAVING Count(*) >= 'terminal'", "score": -0.004907837683276739}]}
{"index": 243, "beams": [{"orig_question": "Find all airlines that have fewer than 200 flights.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) < 'terminal'", "score": -0.06887441194521671}]}
{"index": 244, "beams": [{"orig_question": "Which airlines have less than 200 flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline HAVING Count(*) < 'terminal'", "score": -0.028954650040752483}]}
{"index": 245, "beams": [{"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'", "score": -0.03509358363226056}]}
{"index": 246, "beams": [{"orig_question": "Which flight numbers correspond to United Airlines flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights WHERE airlines.Airline = 'terminal'", "score": -0.0037035421701148152}]}
{"index": 247, "beams": [{"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.00016975402331809164}]}
{"index": 248, "beams": [{"orig_question": "Give the flight numbers of flights leaving from APG.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.00015294551843680892}]}
{"index": 249, "beams": [{"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.010896474058426975}]}
{"index": 250, "beams": [{"orig_question": "Give the flight numbers of flights landing at APG.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'terminal'", "score": -0.0002695255898288451}]}
{"index": 251, "beams": [{"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.0005890970060065115}]}
{"index": 252, "beams": [{"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.0016957611078325385}]}
{"index": 253, "beams": [{"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.000664902239797982}]}
{"index": 254, "beams": [{"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports WHERE airports.City = 'terminal'", "score": -0.0006057884020265192}]}
{"index": 255, "beams": [{"orig_question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal' OR airports.City = 'terminal'", "score": -0.0010381928876768143}]}
{"index": 256, "beams": [{"orig_question": "How many flights land in Aberdeen or Abilene?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM flights JOIN airports WHERE airports.City = 'terminal' OR airports.City = 'terminal'", "score": -0.002771983679679124}]}
{"index": 257, "beams": [{"orig_question": "Find the name of airports which do not have any flight in and out.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights)", "score": -0.17567872990957767}]}
{"index": 258, "beams": [{"orig_question": "Which airports do not have departing or arriving flights?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT airports.AirportName FROM airports EXCEPT SELECT flights.SourceAirport FROM airports JOIN flights", "score": -0.49438130503494193}]}
{"index": 259, "beams": [{"orig_question": "How many employees are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM employee", "score": -0.00018739690767688444}]}
{"index": 260, "beams": [{"orig_question": "Count the number of employees", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM employee", "score": -0.0001837014642660506}]}
{"index": 261, "beams": [{"orig_question": "Sort employee names by their age in ascending order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.Name FROM employee ORDER BY employee.Age Asc", "score": -0.00038659572413735077}]}
{"index": 262, "beams": [{"orig_question": "List the names of employees and sort in ascending order of age.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.Name FROM employee ORDER BY employee.Age Asc", "score": -0.00038623809632554185}]}
{"index": 263, "beams": [{"orig_question": "What is the number of employees from each city?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.City, Count(*) FROM employee GROUP BY employee.City", "score": -0.019059419631929586}]}
{"index": 264, "beams": [{"orig_question": "Count the number of employees for each city.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.City, Count(*) FROM employee GROUP BY employee.City", "score": -0.01488125324248557}]}
{"index": 265, "beams": [{"orig_question": "Which cities do more than one employee under age 30 come from?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.City FROM employee WHERE employee.Age < 'terminal' GROUP BY employee.City HAVING Count(*) > 'terminal'", "score": -0.05817556359033915}]}
{"index": 266, "beams": [{"orig_question": "Find the cities that have more than one employee under age 30.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.City FROM employee WHERE employee.Age < 'terminal' GROUP BY employee.City HAVING Count(*) > 'terminal'", "score": -0.00500512069626069}]}
{"index": 267, "beams": [{"orig_question": "Find the number of shops in each location.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), shop.Location FROM shop GROUP BY shop.Location", "score": -0.0008800029736448778}]}
{"index": 268, "beams": [{"orig_question": "How many shops are there in each location?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), shop.Location FROM shop GROUP BY shop.Location", "score": -0.0007876157740156486}]}
{"index": 269, "beams": [{"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products Desc LIMIT 1", "score": -0.001171426672385678}]}
{"index": 270, "beams": [{"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products Desc LIMIT 1", "score": -0.005468132905647849}]}
{"index": 271, "beams": [{"orig_question": "find the minimum and maximum number of products of all stores.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Min(shop.Number_products), Max(shop.Number_products) FROM shop", "score": -0.0014859437942433829}]}
{"index": 272, "beams": [{"orig_question": "What are the minimum and maximum number of products across all the shops?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Min(shop.Number_products), Max(shop.Number_products) FROM shop", "score": -0.001383900642387914}]}
{"index": 273, "beams": [{"orig_question": "Return the name, location and district of all shops in descending order of number of products.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products Desc", "score": -0.001153230667085836}]}
{"index": 274, "beams": [{"orig_question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products Desc", "score": -0.001770734786859407}]}
{"index": 275, "beams": [{"orig_question": "Find the names of stores whose number products is more than the average number of products.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT Avg(shop.Number_products) FROM shop)", "score": -0.0008701086035216576}]}
{"index": 276, "beams": [{"orig_question": "Which shops' number products is above the average? Give me the shop names.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT Avg(shop.Number_products) FROM shop)", "score": -0.0008212327847871848}]}
{"index": 277, "beams": [{"orig_question": "find the name of employee who was awarded the most times in the evaluation.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation GROUP BY evaluation.Employee_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.0006517168987940636}]}
{"index": 278, "beams": [{"orig_question": "Which employee received the most awards in evaluations? Give me the employee name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation GROUP BY evaluation.Employee_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.0020519529750799848}]}
{"index": 279, "beams": [{"orig_question": "Find the name of the employee who got the highest one time bonus.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ORDER BY evaluation.Bonus Desc LIMIT 1", "score": -0.00048303603318800015}]}
{"index": 280, "beams": [{"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ORDER BY evaluation.Bonus Desc LIMIT 1", "score": -0.0010562933748516912}]}
{"index": 281, "beams": [{"orig_question": "Find the names of employees who never won any award in the evaluation.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)", "score": -0.0019458531971778825}]}
{"index": 282, "beams": [{"orig_question": "What are the names of the employees who never received any evaluation?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)", "score": -0.0007475614546734732}]}
{"index": 283, "beams": [{"orig_question": "What is the name of the shop that is hiring the largest number of employees?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM hiring JOIN shop GROUP BY hiring.Shop_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.000616550433043983}]}
{"index": 284, "beams": [{"orig_question": "Which shop has the most employees? Give me the shop name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM hiring JOIN shop GROUP BY hiring.Shop_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.13222562240707703}]}
{"index": 285, "beams": [{"orig_question": "Find the name of the shops that do not hire any employee.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring)", "score": -0.000722169876084422}]}
{"index": 286, "beams": [{"orig_question": "Which shops run with no employees? Find the shop names", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT hiring.Shop_ID FROM hiring)", "score": -0.0007041692733409377}]}
{"index": 287, "beams": [{"orig_question": "Find the number of employees hired in each shop; show the shop name as well.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.Name, Count(*) FROM hiring JOIN shop GROUP BY hiring.Shop_ID", "score": -0.07634683791388852}]}
{"index": 288, "beams": [{"orig_question": "For each shop, return the number of employees working there and the name of the shop.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), shop.Name FROM hiring JOIN shop GROUP BY shop.Shop_ID", "score": -1.098186633539143}]}
{"index": 289, "beams": [{"orig_question": "What is total bonus given in all evaluations?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Sum(evaluation.Bonus) FROM evaluation", "score": -0.00035381317138671875}]}
{"index": 290, "beams": [{"orig_question": "Find the total amount of bonus given in all the evaluations.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Sum(evaluation.Bonus) FROM evaluation", "score": -0.00033581256865744535}]}
{"index": 291, "beams": [{"orig_question": "Give me all the information about hiring.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT * FROM hiring", "score": -0.0002782343051421776}]}
{"index": 292, "beams": [{"orig_question": "What is all the information about hiring?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT * FROM hiring", "score": -0.00034296171315872925}]}
{"index": 293, "beams": [{"orig_question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.District FROM shop WHERE shop.Number_products < 'terminal' INTERSECT SELECT shop.District FROM shop WHERE shop.Number_products > 'terminal'", "score": -0.002564668655367086}]}
{"index": 294, "beams": [{"orig_question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT shop.District FROM shop WHERE shop.Number_products < 'terminal' INTERSECT SELECT shop.District FROM shop WHERE shop.Number_products > 'terminal'", "score": -0.0024245977401164964}]}
{"index": 295, "beams": [{"orig_question": "How many different store locations are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT shop.Location) FROM shop", "score": -0.00022482781059807166}]}
{"index": 296, "beams": [{"orig_question": "Count the number of distinct store locations.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT shop.Location) FROM shop", "score": -0.0002957517936010845}]}
{"index": 297, "beams": [{"orig_question": "How many documents do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Documents", "score": -0.0001893043516929538}]}
{"index": 298, "beams": [{"orig_question": "Count the number of documents.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Documents", "score": -0.00018608570042033534}]}
{"index": 299, "beams": [{"orig_question": "List document IDs, document names, and document descriptions for all documents.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -0.0015233755111125902}]}
{"index": 300, "beams": [{"orig_question": "What are the ids, names, and descriptions for all documents?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -0.0014644860978592078}]}
{"index": 301, "beams": [{"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE 'terminal'", "score": -0.0005906819806114072}]}
{"index": 302, "beams": [{"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE 'terminal'", "score": -0.0006265640258789062}]}
{"index": 303, "beams": [{"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'terminal'", "score": -0.0011202096818578866}]}
{"index": 304, "beams": [{"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'terminal'", "score": -0.001384377465342368}]}
{"index": 305, "beams": [{"orig_question": "How many different templates do all document use?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT Documents.Template_ID) FROM Documents", "score": -0.00038300203914332087}]}
{"index": 306, "beams": [{"orig_question": "Count the number of different templates used for documents.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT Documents.Template_ID) FROM Documents", "score": -0.00021028518676757812}]}
{"index": 307, "beams": [{"orig_question": "How many documents are using the template with type code 'PPT'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.0003876684028227828}]}
{"index": 308, "beams": [{"orig_question": "Count the number of documents that use the PPT template type.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.0004926915243572694}]}
{"index": 309, "beams": [{"orig_question": "Show all template ids and number of documents using each template.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID, Count(*) FROM Documents GROUP BY Documents.Template_ID", "score": -0.0005136728285037861}]}
{"index": 310, "beams": [{"orig_question": "What are all different template ids used for documents, and how many times were each of them used?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID, Count(*) FROM Documents GROUP BY Documents.Template_ID", "score": -0.00045204162552181515}]}
{"index": 311, "beams": [{"orig_question": "What is the id and type code for the template used by the most documents?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID, Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.7950969366647698}]}
{"index": 312, "beams": [{"orig_question": "Return the id and type code of the template that is used for the greatest number of documents.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID, Documents.Template_ID FROM Templates JOIN Documents GROUP BY Documents.Template_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.06292005267459189}]}
{"index": 313, "beams": [{"orig_question": "Show ids for all templates that are used by more than one document.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING Count(*) > 'terminal'", "score": -0.00108969211260046}]}
{"index": 314, "beams": [{"orig_question": "What are the template ids of any templates used in more than a single document?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING Count(*) > 'terminal'", "score": -0.0007127523421672777}]}
{"index": 315, "beams": [{"orig_question": "Show ids for all templates not used by any document.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents", "score": -0.0005770921688892372}]}
{"index": 316, "beams": [{"orig_question": "What are the ids for templates that are not used in any documents?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents", "score": -0.0006403922816105023}]}
{"index": 317, "beams": [{"orig_question": "How many templates do we have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Templates", "score": -0.00017952919003505485}]}
{"index": 318, "beams": [{"orig_question": "Count the number of templates.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Templates", "score": -0.00018072128284529754}]}
{"index": 319, "beams": [{"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -0.001138806342709131}]}
{"index": 320, "beams": [{"orig_question": "What are the ids, version numbers, and type codes for each template?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -0.002685098653728346}]}
{"index": 321, "beams": [{"orig_question": "Show all distinct template type codes for all templates.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -0.00018167495727539062}]}
{"index": 322, "beams": [{"orig_question": "What are the different template type codes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -0.0005660607121171779}]}
{"index": 323, "beams": [{"orig_question": "What are the ids of templates with template type code PP or PPT?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'terminal' OR Templates.Template_Type_Code = 'terminal'", "score": -0.0006473059256677516}]}
{"index": 324, "beams": [{"orig_question": "Return the ids of templates that have the code PP or PPT.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'terminal' OR Templates.Template_Type_Code = 'terminal'", "score": -0.0006593452853849158}]}
{"index": 325, "beams": [{"orig_question": "How many templates have template type code CV?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.00040982205228345947}]}
{"index": 326, "beams": [{"orig_question": "Count the number of templates of the type CV.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.0008107885905701551}]}
{"index": 327, "beams": [{"orig_question": "What is the version number and template type code for the template with version number later than 5?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 'terminal'", "score": -0.33492743968952254}]}
{"index": 328, "beams": [{"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 'terminal'", "score": -0.0006458440097674156}]}
{"index": 329, "beams": [{"orig_question": "Show all template type codes and number of templates for each.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -0.00045108795166015625}]}
{"index": 330, "beams": [{"orig_question": "What are the different template type codes, and how many templates correspond to each?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code", "score": -0.0004589557647420861}]}
{"index": 331, "beams": [{"orig_question": "Which template type code has most number of templates?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004892349243164062}]}
{"index": 332, "beams": [{"orig_question": "Return the type code of the template type that the most templates belong to.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004956722195856855}]}
{"index": 333, "beams": [{"orig_question": "Show all template type codes with less than three templates.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING Count(*) < 'terminal'", "score": -0.001574993133480973}]}
{"index": 334, "beams": [{"orig_question": "What are the codes of template types that have fewer than 3 templates?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING Count(*) < 'terminal'", "score": -0.0015603303906459587}]}
{"index": 335, "beams": [{"orig_question": "What the smallest version number and its template type code?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Min(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number Asc LIMIT 1", "score": -0.7011482654484666}]}
{"index": 336, "beams": [{"orig_question": "Return the lowest version number, along with its corresponding template type code.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number Asc LIMIT 1", "score": -0.1442223562585241}]}
{"index": 337, "beams": [{"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents WHERE Documents.Document_Name = 'terminal'", "score": -0.0003508309964104228}]}
{"index": 338, "beams": [{"orig_question": "Return the template type code of the template that is used by a document named Data base.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents WHERE Documents.Document_Name = 'terminal'", "score": -0.00033163961165172395}]}
{"index": 339, "beams": [{"orig_question": "Show all document names using templates with template type code BK.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.001991779270611005}]}
{"index": 340, "beams": [{"orig_question": "What are the names of documents that use templates with the code BK?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Documents.Document_Name FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = 'terminal'", "score": -0.00045680999755859375}]}
{"index": 341, "beams": [{"orig_question": "Show all template type codes and the number of documents using each type.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates JOIN Documents GROUP BY Templates.Template_Type_Code", "score": -0.011158058409357352}]}
{"index": 342, "beams": [{"orig_question": "What are the different template type codes, and how many documents use each type?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates JOIN Documents GROUP BY Templates.Template_Type_Code", "score": -0.007171792909332453}]}
{"index": 343, "beams": [{"orig_question": "Which template type code is used by most number of documents?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1", "score": -0.001326757948845625}]}
{"index": 344, "beams": [{"orig_question": "Return the code of the template type that is most commonly used in documents.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0007157312516028469}]}
{"index": 345, "beams": [{"orig_question": "Show all template type codes that are not used by any document.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Documents.Template_ID FROM Templates", "score": -0.5672330018132925}]}
{"index": 346, "beams": [{"orig_question": "What are the codes of template types that are not used for any document?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates", "score": -0.34966261993031367}]}
{"index": 347, "beams": [{"orig_question": "Show all template type codes and descriptions.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -0.00026416778564453125}]}
{"index": 348, "beams": [{"orig_question": "What are the type codes and descriptions for all template types?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -0.024882197335500678}]}
{"index": 349, "beams": [{"orig_question": "What is the template type descriptions for template type code \"AD\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'terminal'", "score": -0.00014209747314453125}]}
{"index": 350, "beams": [{"orig_question": "Return the template type description of the template type with the code AD.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'terminal'", "score": -0.000171661376953125}]}
{"index": 351, "beams": [{"orig_question": "What is the template type code for template type description \"Book\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'terminal'", "score": -0.00021040439588659865}]}
{"index": 352, "beams": [{"orig_question": "Return the type code of the template type with the description \"Book\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'terminal'", "score": -0.00018596649169921875}]}
{"index": 353, "beams": [{"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates", "score": -0.09691308718171854}]}
{"index": 354, "beams": [{"orig_question": "Return the different descriptions for templates that have been used in a document.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT DISTINCT Documents.Document_Description FROM Documents", "score": -0.010696842335164547}]}
{"index": 355, "beams": [{"orig_question": "What are the template ids with template type description \"Presentation\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'terminal'", "score": -0.003584598787711002}]}
{"index": 356, "beams": [{"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'terminal'", "score": -0.0011465800698715611}]}
{"index": 357, "beams": [{"orig_question": "How many paragraphs in total?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Paragraphs", "score": -0.0001823902129842736}]}
{"index": 358, "beams": [{"orig_question": "Count the number of paragraphs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Paragraphs", "score": -0.0001721382139976413}]}
{"index": 359, "beams": [{"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.0080458908341825}]}
{"index": 360, "beams": [{"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.018670959398008335}]}
{"index": 361, "beams": [{"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'terminal'", "score": -0.00056796710123308}]}
{"index": 362, "beams": [{"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE 'terminal'", "score": -0.0008381585430470295}]}
{"index": 363, "beams": [{"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.3070638179777063}]}
{"index": 364, "beams": [{"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.027904078642535524}]}
{"index": 365, "beams": [{"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.0003005266185880373}]}
{"index": 366, "beams": [{"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = 'terminal'", "score": -0.00033330783412566234}]}
{"index": 367, "beams": [{"orig_question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc", "score": -0.018351894148509018}]}
{"index": 368, "beams": [{"orig_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc", "score": -0.0022087563511377084}]}
{"index": 369, "beams": [{"orig_question": "Show all document ids, names and the number of paragraphs in each document.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Count(*) FROM Documents JOIN Paragraphs GROUP BY Documents.Document_ID", "score": -0.24842333712870612}]}
{"index": 370, "beams": [{"orig_question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID, Documents.Document_Name, Count(*) FROM Documents JOIN Paragraphs GROUP BY Documents.Document_ID", "score": -0.8609397558268483}]}
{"index": 371, "beams": [{"orig_question": "List all document ids with at least two paragraphs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) >= 'terminal'", "score": -0.0013725757598734845}]}
{"index": 372, "beams": [{"orig_question": "What are the ids of documents that have 2 or more paragraphs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) >= 'terminal'", "score": -0.0037549734115387423}]}
{"index": 373, "beams": [{"orig_question": "What is the document id and name with greatest number of paragraphs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Paragraphs.Document_ID, Documents.Document_Name FROM Paragraphs JOIN Documents GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.6277280189065095}]}
{"index": 374, "beams": [{"orig_question": "Return the id and name of the document with the most paragraphs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs GROUP BY Documents.Document_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.08971244096749587}]}
{"index": 375, "beams": [{"orig_question": "What is the document id with least number of paragraphs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc LIMIT 1", "score": -0.0008696316799614578}]}
{"index": 376, "beams": [{"orig_question": "Return the id of the document with the fewest paragraphs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc LIMIT 1", "score": -0.0009193420191593304}]}
{"index": 377, "beams": [{"orig_question": "What is the document id with 1 to 2 paragraphs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}], "having": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) BETWEEN 'terminal' AND 'terminal'", "score": -0.019749999045750144}]}
{"index": 378, "beams": [{"orig_question": "Give the ids of documents that have between one and two paragraphs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}], "having": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) BETWEEN 'terminal' AND 'terminal'", "score": -0.139968156316165}]}
{"index": 379, "beams": [{"orig_question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'terminal' INTERSECT SELECT Paragraphs.Document_ID FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'terminal'", "score": -0.000802636129151324}]}
{"index": 380, "beams": [{"orig_question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Paragraphs.Document_ID FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'terminal' INTERSECT SELECT Paragraphs.Document_ID FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'terminal'", "score": -0.1757888942955219}]}
{"index": 381, "beams": [{"orig_question": "How many teachers are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM teacher", "score": -0.00018918514001597941}]}
{"index": 382, "beams": [{"orig_question": "What is the total count of teachers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM teacher", "score": -0.00020265578950784402}]}
{"index": 383, "beams": [{"orig_question": "List the names of teachers in ascending order of age.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher ORDER BY teacher.Age Asc", "score": -0.000390291167605028}]}
{"index": 384, "beams": [{"orig_question": "What are the names of the teachers ordered by ascending age?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher ORDER BY teacher.Age Asc", "score": -0.0004092454905730847}]}
{"index": 385, "beams": [{"orig_question": "What are the age and hometown of teachers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -0.0002983808162753121}]}
{"index": 386, "beams": [{"orig_question": "What is the age and hometown of every teacher?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -0.00030219548443710664}]}
{"index": 387, "beams": [{"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'terminal'", "score": -0.0008029937744140625}]}
{"index": 388, "beams": [{"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'terminal'", "score": -0.0008182525634765625}]}
{"index": 389, "beams": [{"orig_question": "Show the name of teachers aged either 32 or 33?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Age = 'terminal' OR teacher.Age = 'terminal'", "score": -0.0006895063106640009}]}
{"index": 390, "beams": [{"orig_question": "What are the names of the teachers who are aged either 32 or 33?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Age = 'terminal' OR teacher.Age = 'terminal'", "score": -0.000806092204577169}]}
{"index": 391, "beams": [{"orig_question": "What is the hometown of the youngest teacher?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age Asc LIMIT 1", "score": -0.0005561113280236896}]}
{"index": 392, "beams": [{"orig_question": "Where is the youngest teacher from?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age Asc LIMIT 1", "score": -0.0010281801203291252}]}
{"index": 393, "beams": [{"orig_question": "Show different hometown of teachers and the number of teachers from each hometown.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown, Count(*) FROM teacher GROUP BY teacher.Hometown", "score": -0.0005615949614821147}]}
{"index": 394, "beams": [{"orig_question": "For each hometown, how many teachers are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown, Count(*) FROM teacher GROUP BY teacher.Hometown", "score": -0.0005655288696289062}]}
{"index": 395, "beams": [{"orig_question": "List the most common hometown of teachers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY Count(*) Desc LIMIT 1", "score": -0.00042819976806640625}]}
{"index": 396, "beams": [{"orig_question": "What is the most commmon hometowns for teachers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY Count(*) Desc LIMIT 1", "score": -0.00042438507080078125}]}
{"index": 397, "beams": [{"orig_question": "Show the hometowns shared by at least two teachers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING Count(*) >= 'terminal'", "score": -0.0008068084716796875}]}
{"index": 398, "beams": [{"orig_question": "What are the towns from which at least two teachers come from?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING Count(*) >= 'terminal'", "score": -0.0008172988891601562}]}
{"index": 399, "beams": [{"orig_question": "Show names of teachers and the courses they are arranged to teach.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher JOIN course", "score": -0.4944796914514882}]}
{"index": 400, "beams": [{"orig_question": "What is the name of each teacher and what course they teach?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course JOIN teacher", "score": -0.07859848765638588}]}
{"index": 401, "beams": [{"orig_question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course JOIN teacher ORDER BY teacher.Name Asc", "score": -0.03665084508185146}]}
{"index": 402, "beams": [{"orig_question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course JOIN teacher ORDER BY teacher.Name Asc", "score": -0.004984873477916096}]}
{"index": 403, "beams": [{"orig_question": "Show the name of the teacher for the math course.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange JOIN teacher WHERE course.Course = 'terminal'", "score": -0.005372143223183912}]}
{"index": 404, "beams": [{"orig_question": "What are the names of the people who teach math courses?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange JOIN teacher WHERE course.Course = 'terminal'", "score": -0.002112635356724013}]}
{"index": 405, "beams": [{"orig_question": "Show names of teachers and the number of courses they teach.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name, Count(*) FROM course_arrange JOIN teacher GROUP BY course_arrange.Teacher_ID", "score": -0.35770730103813975}]}
{"index": 406, "beams": [{"orig_question": "What are the names of the teachers and how many courses do they teach?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name, Count(*) FROM course_arrange JOIN teacher GROUP BY teacher.Name", "score": -0.005067107460483555}]}
{"index": 407, "beams": [{"orig_question": "Show names of teachers that teach at least two courses.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM course_arrange JOIN teacher GROUP BY course_arrange.Teacher_ID HAVING Count(*) >= 'terminal'", "score": -0.18679296963908598}]}
{"index": 408, "beams": [{"orig_question": "What are the names of the teachers who teach at least two courses?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM course_arrange JOIN teacher GROUP BY course_arrange.Teacher_ID HAVING Count(*) >= 'terminal'", "score": -0.021455956622922656}]}
{"index": 409, "beams": [{"orig_question": "List the names of teachers who have not been arranged to teach courses.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)", "score": -0.0007288455962992657}]}
{"index": 410, "beams": [{"orig_question": "What are the names of the teachers whose courses have not been arranged?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)", "score": -0.0007125139236379141}]}
{"index": 411, "beams": [{"orig_question": "How many visitors below age 30 are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM visitor WHERE visitor.Age < 'terminal'", "score": -0.009914750480675139}]}
{"index": 412, "beams": [{"orig_question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 'terminal' ORDER BY visitor.Level_of_membership Asc", "score": -0.04429483786225319}]}
{"index": 413, "beams": [{"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(visitor.Age) FROM visitor WHERE visitor.Level_of_membership < 'terminal'", "score": -0.005970001220703125}]}
{"index": 414, "beams": [{"orig_question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 'terminal' ORDER BY visitor.Age Desc", "score": -0.0026702572940848768}]}
{"index": 415, "beams": [{"orig_question": "Find the id and name of the museum that has the most staff members?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum ORDER BY museum.Num_of_Staff Desc LIMIT 1", "score": -0.0004220008430024791}]}
{"index": 416, "beams": [{"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 'terminal'", "score": -0.0005704164504933829}]}
{"index": 417, "beams": [{"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = 'terminal'", "score": -0.00030112175591057166}]}
{"index": 418, "beams": [{"orig_question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > (SELECT Min(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year > 'terminal')", "score": -0.5817485276884327}]}
{"index": 419, "beams": [{"orig_question": "find the id, name and age for visitors who visited some museums more than once.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit GROUP BY visitor.ID HAVING Count(*) > 'terminal'", "score": -0.08838648747433808}]}
{"index": 420, "beams": [{"orig_question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT visit.Museum_ID, museum.Name, visitor.Level_of_membership FROM visit JOIN visitor JOIN museum GROUP BY visit.Num_of_Ticket ORDER BY Sum(visit.Total_spent) Desc LIMIT 1", "score": -6.5311462770632716}]}
{"index": 421, "beams": [{"orig_question": "What are the id and name of the museum visited most times?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit GROUP BY museum.Museum_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.10081208369830819}]}
{"index": 422, "beams": [{"orig_question": "What is the name of the museum that had no visitor yet?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN (SELECT visit.Museum_ID FROM visit)", "score": -0.0007004737841356246}]}
{"index": 423, "beams": [{"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ORDER BY visit.Num_of_Ticket Desc LIMIT 1", "score": -0.007663527968816197}]}
{"index": 424, "beams": [{"orig_question": "What are the average and maximum number of tickets bought in all visits?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(visit.Num_of_Ticket), Max(visit.Num_of_Ticket) FROM visit", "score": -0.0018339157031732611}]}
{"index": 425, "beams": [{"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(visit.Total_spent) FROM visitor JOIN visit WHERE visitor.Level_of_membership = 'terminal'", "score": -0.0006034374218799599}]}
{"index": 426, "beams": [{"orig_question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT visitor.Name FROM visitor JOIN visit JOIN museum WHERE museum.Open_Year < 'terminal' INTERSECT SELECT visitor.Name FROM visit JOIN visitor JOIN museum WHERE museum.Open_Year > 'terminal'", "score": -0.5721392113266575}]}
{"index": 427, "beams": [{"orig_question": "Find the number of visitors who did not visit any museum opened after 2010.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM visit WHERE visit.Museum_ID NOT IN (SELECT museum.Museum_ID FROM museum WHERE museum.Open_Year > 'terminal')", "score": -0.023986051158310318}]}
{"index": 428, "beams": [{"orig_question": "How many museums were opened after 2013 or before 2008?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM museum WHERE museum.Open_Year > 'terminal' OR museum.Open_Year < 'terminal'", "score": -0.001313924789315024}]}
{"index": 429, "beams": [{"orig_question": "Find the total number of players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM players", "score": -0.0009865252650342882}]}
{"index": 430, "beams": [{"orig_question": "How many players are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM players", "score": -0.0006109901296440512}]}
{"index": 431, "beams": [{"orig_question": "Find the total number of matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM matches", "score": -0.0003337860107421875}]}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM matches", "score": -0.00034725666045432035}]}
{"index": 433, "beams": [{"orig_question": "List the first name and birth date of all players from the country with code USA.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'terminal'", "score": -0.00025951862334494535}]}
{"index": 434, "beams": [{"orig_question": "What are the first names and birth dates of players from the USA?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'terminal'", "score": -0.00027251243568571226}]}
{"index": 435, "beams": [{"orig_question": "Find the average age of losers and winners of all matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 28, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(matches.loser_age), Avg(matches.winner_age) FROM matches", "score": -0.15118897588399705}]}
{"index": 436, "beams": [{"orig_question": "What are the average ages of losers and winners across matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 28, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "union": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(matches.loser_age), Avg(matches.winner_age) FROM matches UNION SELECT matches.loser_age FROM matches", "score": -0.9213905865324818}]}
{"index": 437, "beams": [{"orig_question": "Find the average rank of winners in all matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(matches.winner_rank) FROM matches", "score": -0.0016588373109698296}]}
{"index": 438, "beams": [{"orig_question": "What is the average rank for winners in all matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(matches.winner_rank) FROM matches", "score": -0.0033097604755312204}]}
{"index": 439, "beams": [{"orig_question": "Find the highest rank of losers in all matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Min(matches.loser_rank) FROM matches", "score": -0.005656361579887914}]}
{"index": 440, "beams": [{"orig_question": "What is the best rank of losers across all matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Max(matches.loser_rank) FROM matches", "score": -0.17667227983474731}]}
{"index": 441, "beams": [{"orig_question": "find the number of distinct country codes of all players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT players.country_code) FROM players", "score": -0.00019657611846213285}]}
{"index": 442, "beams": [{"orig_question": "How many distinct countries do players come from?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT players.country_code) FROM players", "score": -0.00020444393152274642}]}
{"index": 443, "beams": [{"orig_question": "Find the number of distinct name of losers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT matches.loser_name) FROM matches", "score": -0.0008332532015629113}]}
{"index": 444, "beams": [{"orig_question": "How many different loser names are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT matches.loser_name) FROM matches", "score": -0.00020134449005126953}]}
{"index": 445, "beams": [{"orig_question": "Find the name of tourney that has more than 10 matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING Count(*) > 'terminal'", "score": -0.000820860759745301}]}
{"index": 446, "beams": [{"orig_question": "What are the names of tournaments that have more than 10 matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING Count(*) > 'terminal'", "score": -0.0006854534098579279}]}
{"index": 447, "beams": [{"orig_question": "List the names of all winners who played in both 2013 and 2016.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name FROM matches WHERE matches.year = 'terminal' INTERSECT SELECT matches.winner_name FROM matches WHERE matches.year = 'terminal'", "score": -0.0009305476939900359}]}
{"index": 448, "beams": [{"orig_question": "What are the names of players who won in both 2013 and 2016?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT players.first_name FROM players JOIN matches WHERE matches.year = 'terminal' INTERSECT SELECT players.first_name FROM players JOIN matches WHERE matches.year = 'terminal'", "score": -0.01586254614733207}]}
{"index": 449, "beams": [{"orig_question": "List the number of all matches who played in years of 2013 or 2016.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM matches WHERE matches.year = 'terminal' OR matches.year = 'terminal'", "score": -0.0010863536699474707}]}
{"index": 450, "beams": [{"orig_question": "How many matches were played in 2013 or 2016?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM matches WHERE matches.year = 'terminal' OR matches.year = 'terminal'", "score": -0.0009249448712509434}]}
{"index": 451, "beams": [{"orig_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT players.country_code, players.first_name FROM players JOIN matches WHERE matches.tourney_name = 'terminal' INTERSECT SELECT players.country_code, players.first_name FROM players JOIN matches WHERE matches.tourney_name = 'terminal'", "score": -0.005218907062328526}]}
{"index": 452, "beams": [{"orig_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN matches WHERE matches.tourney_name = 'terminal' INTERSECT SELECT players.first_name, players.country_code FROM players JOIN matches WHERE matches.tourney_name = 'terminal'", "score": -0.0034503285690945518}]}
{"index": 453, "beams": [{"orig_question": "Find the first name and country code of the oldest player.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1", "score": -0.0013297796152116348}]}
{"index": 454, "beams": [{"orig_question": "What is the first name and country code of the oldest player?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1", "score": -0.0011208057364839874}]}
{"index": 455, "beams": [{"orig_question": "List the first and last name of all players in the order of birth date.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date Asc", "score": -0.0005366802214297195}]}
{"index": 456, "beams": [{"orig_question": "What are the full names of all players, sorted by birth date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date Asc", "score": -0.0005183219909241643}]}
{"index": 457, "beams": [{"orig_question": "List the first and last name of all players who are left / L hand in the order of birth date.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'terminal' ORDER BY players.birth_date Asc", "score": -0.03250753879478907}]}
{"index": 458, "beams": [{"orig_question": "What are the full names of all left handed players, in order of birth date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'terminal' ORDER BY players.birth_date Asc", "score": -0.0005738735020486274}]}
{"index": 459, "beams": [{"orig_question": "Find the first name and country code of the player who did the most number of tours.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings GROUP BY rankings.player_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.008075277319676388}]}
{"index": 460, "beams": [{"orig_question": "What is the first name and country code of the player with the most tours?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings GROUP BY rankings.player_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.01569315185645337}]}
{"index": 461, "beams": [{"orig_question": "Find the year that has the most number of matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008279085159230704}]}
{"index": 462, "beams": [{"orig_question": "Which year had the most matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.year FROM matches GROUP BY matches.year ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008062124251750902}]}
{"index": 463, "beams": [{"orig_question": "Find the name and rank points of the winner who won the most times.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY Count(*) Desc LIMIT 1", "score": -0.33126437018700017}]}
{"index": 464, "beams": [{"orig_question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 36, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY Sum(matches.winner_rank_points) Desc LIMIT 1", "score": -0.06700730632275054}]}
{"index": 465, "beams": [{"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches WHERE matches.tourney_name = 'terminal' ORDER BY rankings.ranking_points Desc LIMIT 1", "score": -6.152298692613378}]}
{"index": 466, "beams": [{"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches WHERE matches.tourney_name = 'terminal' ORDER BY rankings.ranking_points Desc LIMIT 1", "score": -5.637001958208998}]}
{"index": 467, "beams": [{"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM matches ORDER BY matches.minutes Desc LIMIT 1", "score": -0.0008059735800927115}]}
{"index": 468, "beams": [{"orig_question": "What are the names of the winner and loser who played in the longest match?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes Desc LIMIT 1", "score": -0.053275585135111214}]}
{"index": 469, "beams": [{"orig_question": "Find the average ranking for each player and their first name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(rankings.ranking), players.first_name FROM rankings JOIN players GROUP BY rankings.player_id", "score": -0.03552908954588929}]}
{"index": 470, "beams": [{"orig_question": "What are the first names of all players, and their average rankings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT players.first_name, Avg(rankings.ranking) FROM players JOIN rankings GROUP BY rankings.player_id", "score": -0.09606609608454164}]}
{"index": 471, "beams": [{"orig_question": "Find the total ranking points for each player and their first name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Sum(rankings.ranking_points), players.first_name FROM rankings JOIN players GROUP BY players.first_name", "score": -0.0012210563254413387}]}
{"index": 472, "beams": [{"orig_question": "What are the first names of all players, and their total ranking points?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT players.first_name, Sum(rankings.ranking_points) FROM players JOIN rankings GROUP BY players.first_name", "score": -0.003342911811785143}]}
{"index": 473, "beams": [{"orig_question": "find the number of players for each country.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code, Count(*) FROM players GROUP BY players.country_code", "score": -0.0005457401275350549}]}
{"index": 474, "beams": [{"orig_question": "How many players are from each country?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code, Count(*) FROM players GROUP BY players.country_code", "score": -0.0005655288696289062}]}
{"index": 475, "beams": [{"orig_question": "find the code of the country where has the greatest number of players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1", "score": -0.000518798828125}]}
{"index": 476, "beams": [{"orig_question": "What is the code of the country with the most players?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1", "score": -0.000568389892578125}]}
{"index": 477, "beams": [{"orig_question": "Find the codes of countries that have more than 50 players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING Count(*) > 'terminal'", "score": -0.0008182525167512722}]}
{"index": 478, "beams": [{"orig_question": "What are the codes of countries with more than 50 players?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.country_code FROM players GROUP BY players.country_code HAVING Count(*) > 'terminal'", "score": -0.001722335796216612}]}
{"index": 479, "beams": [{"orig_question": "Find the total number of tours for each ranking date.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 39, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 39, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT rankings.ranking_date, Count(rankings.tours) FROM rankings GROUP BY rankings.ranking_date", "score": -0.5130802392959524}]}
{"index": 480, "beams": [{"orig_question": "How many total tours were there for each ranking date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 39, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 39, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT rankings.ranking_date, Count(rankings.tours) FROM rankings GROUP BY rankings.ranking_date", "score": -0.2999951615925056}]}
{"index": 481, "beams": [{"orig_question": "Find the number of matches happened in each year.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), matches.year FROM matches GROUP BY matches.year", "score": -0.0009624958021845487}]}
{"index": 482, "beams": [{"orig_question": "How many matches were played in each year?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), matches.year FROM matches GROUP BY matches.year", "score": -0.2072421312263657}]}
{"index": 483, "beams": [{"orig_question": "Find the name and rank of the 3 youngest winners across all matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.loser_age Asc LIMIT 1", "score": -0.2529922565432514}]}
{"index": 484, "beams": [{"orig_question": "What are the names and ranks of the three youngest winners across all matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 28, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT matches.winner_name, matches.winner_rank FROM matches ORDER BY matches.winner_age Asc LIMIT 1", "score": -0.1994305062080386}]}
{"index": 485, "beams": [{"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT matches.winner_id) FROM matches WHERE matches.tourney_name = 'terminal' INTERSECT SELECT matches.winner_id FROM matches WHERE matches.tourney_name = 'terminal'", "score": -0.00935446929383943}]}
{"index": 486, "beams": [{"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 30, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM matches WHERE matches.tourney_name = 'terminal' AND matches.winner_hand = 'terminal'", "score": -0.8392798112472519}]}
{"index": 487, "beams": [{"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ORDER BY matches.winner_rank_points Desc LIMIT 1", "score": -0.5630739022450371}]}
{"index": 488, "beams": [{"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ORDER BY matches.winner_rank_points Desc LIMIT 1", "score": -0.2573283908145072}]}
{"index": 489, "beams": [{"orig_question": "Find the number of players for each hand type.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.hand, Count(*) FROM players GROUP BY players.hand", "score": -0.0005171298980428674}]}
{"index": 490, "beams": [{"orig_question": "How many players are there for each hand type?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT players.hand, Count(*) FROM players GROUP BY players.hand", "score": -0.000507354736328125}]}
{"index": 491, "beams": [{"orig_question": "How many ships ended up being 'Captured'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM ship JOIN battle WHERE battle.result = 'terminal'", "score": -0.000847575812706225}]}
{"index": 492, "beams": [{"orig_question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name Desc", "score": -0.0006284713745117188}]}
{"index": 493, "beams": [{"orig_question": "List the name, date and result of each battle.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle", "score": -0.0008624792098643752}]}
{"index": 494, "beams": [{"orig_question": "What is maximum and minimum death toll caused each time?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Max(death.killed), Min(death.killed), Min(death.killed) FROM death GROUP BY death.killed", "score": -0.5017584562069501}]}
{"index": 495, "beams": [{"orig_question": "What is the average number of injuries caused each time?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(death.injured), death.injured FROM death GROUP BY death.injured", "score": -0.0014375447058156965}]}
{"index": 496, "beams": [{"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship WHERE ship.tonnage = 'terminal'", "score": -0.1366606156606167}]}
{"index": 497, "beams": [{"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != 'terminal'", "score": -0.0008169412611707116}]}
{"index": 498, "beams": [{"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle WHERE ship.ship_type = 'terminal'", "score": -0.00552594961561681}]}
{"index": 499, "beams": [{"orig_question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 17, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT battle.id, battle.name FROM ship JOIN battle JOIN death GROUP BY battle.id HAVING Sum(death.killed) > 'terminal'", "score": -0.21134007864258564}]}
{"index": 500, "beams": [{"orig_question": "What is the ship id and name that caused most total injuries?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 18, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT ship.id, ship.name FROM ship JOIN death GROUP BY ship.id ORDER BY Sum(death.injured) Desc LIMIT 1", "score": -0.02524789235985736}]}
{"index": 501, "beams": [{"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'terminal' AND battle.latin_commander = 'terminal' INTERSECT SELECT battle.name FROM battle WHERE battle.bulgarian_commander = 'terminal' AND battle.latin_commander = 'terminal'", "score": -1.0685940975545165}]}
{"index": 502, "beams": [{"orig_question": "How many different results are there for the battles?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT battle.result) FROM battle", "score": -0.0001918077468801016}]}
{"index": 503, "beams": [{"orig_question": "How many battles did not lose any ship with tonnage '225'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = 'terminal')", "score": -0.0023462772355102857}]}
{"index": 504, "beams": [{"orig_question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT battle.name, battle.date FROM ship JOIN battle WHERE ship.name = 'terminal' INTERSECT SELECT battle.name, battle.date FROM ship JOIN battle WHERE ship.name = 'terminal'", "score": -0.002266483232254757}]}
{"index": 505, "beams": [{"orig_question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'terminal')", "score": -0.15449656564077685}]}
{"index": 506, "beams": [{"orig_question": "What are the notes of the death events which has substring 'East'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT death.note FROM death WHERE death.note LIKE 'terminal'", "score": -0.00047779083251953125}]}
{"index": 507, "beams": [{"orig_question": "what are all the addresses including line 1 and line 2?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 'terminal'", "score": -0.5910256981151178}]}
{"index": 508, "beams": [{"orig_question": "What is the first and second line for all addresses?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses", "score": -0.00025975698281399673}]}
{"index": 509, "beams": [{"orig_question": "How many courses in total are listed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Courses", "score": -0.00020003316058136988}]}
{"index": 510, "beams": [{"orig_question": "How many courses are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Courses", "score": -0.0001977682104552514}]}
{"index": 511, "beams": [{"orig_question": "How is the math course described?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = 'terminal'", "score": -1.0796875357627869}]}
{"index": 512, "beams": [{"orig_question": "What are the descriptions for all the math courses?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Courses.course_description FROM Courses JOIN Sections JOIN Departments WHERE Courses.course_name = 'terminal'", "score": -0.29010771827594795}]}
{"index": 513, "beams": [{"orig_question": "What is the zip code of the address in the city Port Chelsea?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'terminal'", "score": -0.0001345872878957266}]}
{"index": 514, "beams": [{"orig_question": "What is the zip code for Port Chelsea?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'terminal'", "score": -0.0001423358916952111}]}
{"index": 515, "beams": [{"orig_question": "Which department offers the most number of degrees? List department name and id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Departments.department_name, Degree_Programs.department_id FROM Degree_Programs JOIN Departments GROUP BY Degree_Programs.department_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008861939417954545}]}
{"index": 516, "beams": [{"orig_question": "What is the name and id of the department with the most number of degrees ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Departments.department_name, Degree_Programs.department_id FROM Degree_Programs JOIN Departments GROUP BY Degree_Programs.department_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.07411843537965979}]}
{"index": 517, "beams": [{"orig_question": "How many departments offer any degree?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -0.00023388862608442196}]}
{"index": 518, "beams": [{"orig_question": "How many different departments offer degrees?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -0.0003325939015894619}]}
{"index": 519, "beams": [{"orig_question": "How many different degree names are offered?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -0.00026464210532139987}]}
{"index": 520, "beams": [{"orig_question": "How many different degrees are offered?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs", "score": -0.12551333010094368}]}
{"index": 521, "beams": [{"orig_question": "How many degrees does the engineering department offer?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Departments JOIN Degree_Programs WHERE Departments.department_name = 'terminal'", "score": -0.0005670740292700316}]}
{"index": 522, "beams": [{"orig_question": "How many degrees does the engineering department have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM Departments JOIN Degree_Programs WHERE Departments.department_name = 'terminal'", "score": -0.0010307660959085752}]}
{"index": 523, "beams": [{"orig_question": "What are the names and descriptions of all the sections?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -0.0002613067626953125}]}
{"index": 524, "beams": [{"orig_question": "What are the names and descriptions for all the sections?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -0.00025844573974609375}]}
{"index": 525, "beams": [{"orig_question": "What are the names and id of courses having at most 2 sections?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Le", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections GROUP BY Courses.course_id HAVING Count(*) <= 'terminal'", "score": -0.02812124283536832}]}
{"index": 526, "beams": [{"orig_question": "What are the names and ids of every course with less than 2 sections?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections GROUP BY Sections.course_id HAVING Count(*) < 'terminal'", "score": -0.5561477413611939}]}
{"index": 527, "beams": [{"orig_question": "List the section_name in reversed lexicographical order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name Desc", "score": -0.00040197372334205284}]}
{"index": 528, "beams": [{"orig_question": "What are the names of the sections in reverse alphabetical order?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name Desc", "score": -0.0003514289845725216}]}
{"index": 529, "beams": [{"orig_question": "What is the semester which most student registered in? Show both the name and the id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Semesters.semester_name, Student_Enrolment.semester_id FROM Semesters JOIN Student_Enrolment GROUP BY Student_Enrolment.semester_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.683922826025082}]}
{"index": 530, "beams": [{"orig_question": "For each semester, what is the name and id of the one with the most students registered?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Semesters.semester_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Semesters GROUP BY Student_Enrolment.semester_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.07746666695720705}]}
{"index": 531, "beams": [{"orig_question": "What is the description of the department whose name has the substring the computer?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE 'terminal'", "score": -0.0004569292068410391}]}
{"index": 532, "beams": [{"orig_question": "What is the department description for the one whose name has the word computer?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE 'terminal'", "score": -0.0004749298095703125}]}
{"index": 533, "beams": [{"orig_question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}], "having": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students GROUP BY Student_Enrolment.semester_id HAVING Count(*) = 'terminal'", "score": -1.6768235822303836}]}
{"index": 534, "beams": [{"orig_question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment WHERE Student_Enrolment.semester_id = 'terminal'", "score": -0.5919979306634104}]}
{"index": 535, "beams": [{"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = 'terminal'", "score": -0.25698799034204}]}
{"index": 536, "beams": [{"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = 'terminal'", "score": -0.277858249679376}]}
{"index": 537, "beams": [{"orig_question": "Find the kind of program which most number of students are enrolled in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.0006734132766652579}]}
{"index": 538, "beams": [{"orig_question": "What is the degree summary name that has the most number of students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment GROUP BY Degree_Programs.degree_summary_name ORDER BY Count(*) Desc LIMIT 1", "score": -0.11552058655979636}]}
{"index": 539, "beams": [{"orig_question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Student_Enrolment.degree_program_id, Student_Enrolment.degree_program_id FROM Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.00418317315893546}]}
{"index": 540, "beams": [{"orig_question": "What is the program id and the summary of the degree that has the most students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Student_Enrolment.degree_program_id, Degree_Programs.degree_summary_description FROM Student_Enrolment JOIN Degree_Programs GROUP BY Student_Enrolment.degree_program_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.041112945330951334}]}
{"index": 541, "beams": [{"orig_question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Students.first_name, Students.first_name, Students.last_name, Count(*) FROM Students JOIN Student_Enrolment GROUP BY Students.student_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.6906298454043736}]}
{"index": 542, "beams": [{"orig_question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name, Count(*) FROM Students JOIN Student_Enrolment GROUP BY Students.student_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.1915122986499398}]}
{"index": 543, "beams": [{"orig_question": "Which semesters do not have any student enrolled? List the semester name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 28, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Semesters.semester_name FROM Semesters WHERE Semesters.semester_id NOT IN (SELECT Student_Enrolment.semester_id FROM Student_Enrolment)", "score": -0.013314604759159465}]}
{"index": 544, "beams": [{"orig_question": "What is the name of the semester with no students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Semesters.semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment", "score": -0.0043644568227136915}]}
{"index": 545, "beams": [{"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 8}]}}, "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses", "score": -0.14691102504602327}]}
{"index": 546, "beams": [{"orig_question": "What are the names of all courses that have some students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 8}]}}, "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses", "score": -0.003461122512440795}]}
{"index": 547, "beams": [{"orig_question": "What's the name of the course with most number of enrollments?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 8}]}}, "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses GROUP BY Courses.course_name ORDER BY Count(*) Desc LIMIT 1", "score": -0.015598345598789365}]}
{"index": 548, "beams": [{"orig_question": "What is the name of the course with the most students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 8}]}}, "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses GROUP BY Courses.course_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.0804795771820963}]}
{"index": 549, "beams": [{"orig_question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 47, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Students.last_name FROM Students JOIN Student_Enrolment WHERE Addresses.city = 'terminal' EXCEPT SELECT Student_Enrolment.student_id FROM Students JOIN Student_Enrolment", "score": -1.0071482154012301}]}
{"index": 550, "beams": [{"orig_question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.last_name FROM Students WHERE Addresses.city = 'terminal' EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment JOIN Addresses", "score": -1.1564676288853661}]}
{"index": 551, "beams": [{"orig_question": "Show the date and id of the transcript with at least 2 course results.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}, {"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id HAVING Count(*) >= 'terminal'", "score": -0.0011683702278730834}]}
{"index": 552, "beams": [{"orig_question": "What is the date and id of the transcript with at least 2 courses listed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}, {"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id HAVING Count(*) >= 'terminal'", "score": -0.001322150211407802}]}
{"index": 553, "beams": [{"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'terminal' AND Students.last_name = 'terminal'", "score": -0.00024890899658203125}]}
{"index": 554, "beams": [{"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'terminal' AND Students.last_name = 'terminal'", "score": -0.0002682209014608361}]}
{"index": 555, "beams": [{"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students", "score": -0.12062871455850654}]}
{"index": 556, "beams": [{"orig_question": "What is the first, middle, and last name of the first student to register?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered Asc LIMIT 1", "score": -0.009430881101593513}]}
{"index": 557, "beams": [{"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered Asc LIMIT 1", "score": -0.008293339047497739}]}
{"index": 558, "beams": [{"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered Asc LIMIT 1", "score": -0.025218814086649388}]}
{"index": 559, "beams": [{"orig_question": "Whose permanent address is different from his or her current address? List his or her first name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}, "val1": {"_type": "ColUnit", "c": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name FROM Addresses JOIN Students WHERE Students.permanent_address_id != Students.permanent_address_id", "score": -1.1053240894867713}]}
{"index": 560, "beams": [{"orig_question": "What is the first name of the student whose permanent address is different from his or her current one?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}, "val1": {"_type": "ColUnit", "c": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name FROM Students WHERE Students.current_address_id != Students.current_address_id", "score": -1.4800716377794672}]}
{"index": 561, "beams": [{"orig_question": "Which address holds the most number of students currently? List the address id and all lines.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Addresses.address_id, Addresses.line_2 FROM Addresses JOIN Students GROUP BY Addresses.address_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.03234462160602902}]}
{"index": 562, "beams": [{"orig_question": "What is the id, line 1, and line 2 of the address with the most students?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students GROUP BY Addresses.address_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.00265669793736123}]}
{"index": 563, "beams": [{"orig_question": "On average, when were the transcripts printed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Avg(Transcripts.transcript_date) FROM Transcripts", "score": -0.00044131278650638706}]}
{"index": 564, "beams": [{"orig_question": "What is the average transcript date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Avg(Transcripts.transcript_date) FROM Transcripts", "score": -0.0003050565703688335}]}
{"index": 565, "beams": [{"orig_question": "When is the first transcript released? List the date and details.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 54, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date Asc LIMIT 1", "score": -0.03133234004502583}]}
{"index": 566, "beams": [{"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date Asc LIMIT 1", "score": -0.204849939676933}]}
{"index": 567, "beams": [{"orig_question": "How many transcripts are released?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Count(*) FROM Transcripts", "score": -0.0012830424821004272}]}
{"index": 568, "beams": [{"orig_question": "How many transcripts are listed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Count(*) FROM Transcripts", "score": -0.0003180482526659034}]}
{"index": 569, "beams": [{"orig_question": "What is the last transcript release date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date Desc LIMIT 1", "score": -0.006282905890884649}]}
{"index": 570, "beams": [{"orig_question": "When was the last transcript released?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}]}}, "inferred_code": "SELECT Max(Transcripts.transcript_date) FROM Transcripts", "score": -0.008358719892385125}]}
{"index": 571, "beams": [{"orig_question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 56, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 56, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcript_Contents.transcript_id, Count(*) FROM Transcript_Contents GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.9660428186411991}]}
{"index": 572, "beams": [{"orig_question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 56, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 56, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 8}, {"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcript_Contents.transcript_id, Count(*) FROM Student_Enrolment_Courses JOIN Transcript_Contents GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.994624935317006}]}
{"index": 573, "beams": [{"orig_question": "Show the date of the transcript which shows the least number of results, also list the id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}, {"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id ORDER BY Count(*) Asc LIMIT 1", "score": -0.011018935389813578}]}
{"index": 574, "beams": [{"orig_question": "What is the date and id of the transcript with the least number of results?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 53, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 52, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 9}, {"_type": "Table", "table_id": 10}]}}, "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id ORDER BY Count(*) Asc LIMIT 1", "score": -0.32308185026407443}]}
{"index": 575, "beams": [{"orig_question": "Find the semester when both Master students and Bachelor students got enrolled in.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Semesters.semester_name FROM Student_Enrolment JOIN Semesters WHERE Degree_Programs.degree_summary_name = 'terminal' INTERSECT SELECT Semesters.semester_name FROM Student_Enrolment JOIN Semesters WHERE Degree_Programs.degree_summary_name = 'terminal'", "score": -0.16224073820603735}]}
{"index": 576, "beams": [{"orig_question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Semesters.semester_name = 'terminal' INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Semesters.semester_name = 'terminal'", "score": -0.6251022808961579}]}
{"index": 577, "beams": [{"orig_question": "How many different addresses do the students currently live?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Count(DISTINCT Students.current_address_id) FROM Students", "score": -0.000354763244104106}]}
{"index": 578, "beams": [{"orig_question": "What are the different addresses that have students living there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT DISTINCT Students.current_address_id FROM Students", "score": -0.3427829444408417}]}
{"index": 579, "beams": [{"orig_question": "List all the student details in reversed lexicographical order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.other_student_details FROM Students ORDER BY Students.other_student_details Desc", "score": -0.09254924762353767}]}
{"index": 580, "beams": [{"orig_question": "What other details can you tell me about students in reverse alphabetical order?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.other_student_details FROM Students ORDER BY Students.other_student_details Desc", "score": -0.00037944315272397944}]}
{"index": 581, "beams": [{"orig_question": "Describe the section h.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'terminal'", "score": -0.004276339895994852}]}
{"index": 582, "beams": [{"orig_question": "What is the description for the section named h?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'terminal'", "score": -0.00014400482177734375}]}
{"index": 583, "beams": [{"orig_question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name FROM Addresses JOIN Students WHERE Addresses.country = 'terminal' OR Students.cell_mobile_number = 'terminal'", "score": -0.0011107920872674981}]}
{"index": 584, "beams": [{"orig_question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Students.first_name FROM Addresses JOIN Students WHERE Addresses.country = 'terminal' OR Students.cell_mobile_number = 'terminal'", "score": -0.01891493796994581}]}
{"index": 585, "beams": [{"orig_question": "List the title of all cartoons in alphabetical order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title Asc", "score": -0.00041794776913661735}]}
{"index": 586, "beams": [{"orig_question": "What are the titles of the cartoons sorted alphabetically?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title Asc", "score": -0.0004421472547733174}]}
{"index": 587, "beams": [{"orig_question": "List all cartoon directed by \"Ben Jones\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.00018501268641557544}]}
{"index": 588, "beams": [{"orig_question": "What are the names of all cartoons directed by Ben Jones?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.00015735626220703125}]}
{"index": 589, "beams": [{"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Cartoon WHERE Cartoon.Written_by = 'terminal'", "score": -0.0002212524191236298}]}
{"index": 590, "beams": [{"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Cartoon WHERE Cartoon.Written_by = 'terminal'", "score": -0.0004119872992873752}]}
{"index": 591, "beams": [{"orig_question": "list all cartoon titles and their directors ordered by their air date", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel JOIN TV_series ORDER BY TV_series.Air_Date Asc", "score": -13.008859256488897}]}
{"index": 592, "beams": [{"orig_question": "What is the name and directors of all the cartoons that are ordered by air date?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel JOIN TV_series ORDER BY TV_series.Air_Date Asc", "score": -12.591600663939964}]}
{"index": 593, "beams": [{"orig_question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal' OR Cartoon.Directed_by = 'terminal'", "score": -0.0006057024002004141}]}
{"index": 594, "beams": [{"orig_question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'terminal' OR Cartoon.Directed_by = 'terminal'", "score": -0.0005570650100636954}]}
{"index": 595, "beams": [{"orig_question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Country, Count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008130073547363281}]}
{"index": 596, "beams": [{"orig_question": "What is the country with the most number of TV Channels and how many does it have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Country, Count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Count(*) Desc LIMIT 1", "score": -0.0009578466415050002}]}
{"index": 597, "beams": [{"orig_question": "List the number of different series names and contents in the TV Channel table.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": true}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT TV_Channel.series_name), TV_Channel.Content FROM TV_Channel", "score": -0.0024900436388506364}]}
{"index": 598, "beams": [{"orig_question": "How many different series and contents are listed in the TV Channel table?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": true}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT TV_Channel.series_name), TV_Channel.Content FROM TV_Channel JOIN TV_series", "score": -0.18957945527290576}]}
{"index": 599, "beams": [{"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.0001678466796875}]}
{"index": 600, "beams": [{"orig_question": "What is the content of the series Sky Radio?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.00015354156494140625}]}
{"index": 601, "beams": [{"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.0001468658447265625}]}
{"index": 602, "beams": [{"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.0001468658447265625}]}
{"index": 603, "beams": [{"orig_question": "How many TV Channel using language English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM TV_Channel WHERE TV_Channel.Language = 'terminal'", "score": -0.00019192695616254696}]}
{"index": 604, "beams": [{"orig_question": "How many TV Channels use the English language?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM TV_Channel WHERE TV_Channel.Language = 'terminal'", "score": -0.00018072128284529754}]}
{"index": 605, "beams": [{"orig_question": "List the language used least number of TV Channel. List language and number of TV Channel.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Count(*) Asc LIMIT 1", "score": -0.000998377785407456}]}
{"index": 606, "beams": [{"orig_question": "What are the languages used by the least number of TV Channels and how many channels use it?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Count(*) Asc LIMIT 1", "score": -0.0074584484084354585}]}
{"index": 607, "beams": [{"orig_question": "List each language and the number of TV Channels using it.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language", "score": -0.0004596710205078125}]}
{"index": 608, "beams": [{"orig_question": "For each language, list the number of TV Channels that use it.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language", "score": -0.6826511621462714}]}
{"index": 609, "beams": [{"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series JOIN Cartoon WHERE Cartoon.Title = 'terminal'", "score": -0.006525032302306499}]}
{"index": 610, "beams": [{"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon WHERE Cartoon.Title = 'terminal'", "score": -0.876236855983727}]}
{"index": 611, "beams": [{"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.15790319418371013}]}
{"index": 612, "beams": [{"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.0004639625548179538}]}
{"index": 613, "beams": [{"orig_question": "List the Episode of all TV series sorted by rating.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating Asc", "score": -0.0010099411010742188}]}
{"index": 614, "beams": [{"orig_question": "What are all of the episodes ordered by ratings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating Asc", "score": -0.0005570645107582095}]}
{"index": 615, "beams": [{"orig_question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating Desc LIMIT 1", "score": -0.0009789466857270668}]}
{"index": 616, "beams": [{"orig_question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating Desc LIMIT 1", "score": -0.13228991082178254}]}
{"index": 617, "beams": [{"orig_question": "What is minimum and maximum share of TV series?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Min(TV_series.Share), Max(TV_series.Share) FROM TV_series", "score": -0.0013411045074178674}]}
{"index": 618, "beams": [{"orig_question": "What is the maximum and minimum share for the TV series?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Max(TV_series.Share), Min(TV_series.Share) FROM TV_series", "score": -0.0018852527426815868}]}
{"index": 619, "beams": [{"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'terminal'", "score": -0.00018978118896484375}]}
{"index": 620, "beams": [{"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'terminal'", "score": -0.00018072128284529754}]}
{"index": 621, "beams": [{"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'terminal'", "score": -0.00014591217041015625}]}
{"index": 622, "beams": [{"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'terminal'", "score": -0.00015676021570243392}]}
{"index": 623, "beams": [{"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series WHERE TV_series.Episode = 'terminal'", "score": -0.00045047544698917363}]}
{"index": 624, "beams": [{"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel WHERE TV_series.Episode = 'terminal'", "score": -0.005830123904161155}]}
{"index": 625, "beams": [{"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel WHERE TV_Channel.series_name = 'terminal'", "score": -0.0006597042070097814}]}
{"index": 626, "beams": [{"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_series.Episode FROM TV_Channel JOIN TV_series WHERE TV_Channel.series_name = 'terminal'", "score": -0.000442617534645251}]}
{"index": 627, "beams": [{"orig_question": "Find the number of cartoons directed by each of the listed directors.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Directed_by, Count(*) FROM Cartoon GROUP BY Cartoon.Directed_by", "score": -0.0015145540237355704}]}
{"index": 628, "beams": [{"orig_question": "How many cartoons did each director create?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*), Cartoon.Directed_by FROM Cartoon GROUP BY Cartoon.Directed_by", "score": -0.06433200835738262}]}
{"index": 629, "beams": [{"orig_question": "Find the production code and channel of the most recently aired cartoon .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date Desc LIMIT 1", "score": -0.0006473064324268307}]}
{"index": 630, "beams": [{"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date Desc LIMIT 1", "score": -0.46537121158075223}]}
{"index": 631, "beams": [{"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'terminal'", "score": -0.0003285407991597822}]}
{"index": 632, "beams": [{"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'terminal'", "score": -0.0010006427696325204}]}
{"index": 633, "beams": [{"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel WHERE Cartoon.Written_by = 'terminal'", "score": -0.012881384696804332}]}
{"index": 634, "beams": [{"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_Channel WHERE Cartoon.Written_by = 'terminal'", "score": -0.005344986832817256}]}
{"index": 635, "beams": [{"orig_question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Written_by = 'terminal'", "score": -0.0259266762864101}]}
{"index": 636, "beams": [{"orig_question": "What are the countries that are not playing cartoons written by Todd Casey?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel WHERE Cartoon.Written_by = 'terminal'", "score": -0.1689483821390354}]}
{"index": 637, "beams": [{"orig_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal' INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.067579257044315}]}
{"index": 638, "beams": [{"orig_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal' INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.6840678451937094}]}
{"index": 639, "beams": [{"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'terminal'", "score": -0.0009768009185719961}]}
{"index": 640, "beams": [{"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'terminal'", "score": -0.0009742975233777429}]}
{"index": 641, "beams": [{"orig_question": "find id of the tv channels that from the countries where have more than two tv channels.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.id, TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country HAVING Count(*) > 'terminal'", "score": -0.06978588295168464}]}
{"index": 642, "beams": [{"orig_question": "What are the ids of all tv channels that have more than 2 TV channels?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT TV_Channel.id FROM TV_Channel JOIN TV_series GROUP BY TV_Channel.id HAVING Count(*) > 'terminal'", "score": -7.894441217163994}]}
{"index": 643, "beams": [{"orig_question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.006068816492160067}]}
{"index": 644, "beams": [{"orig_question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.006086595443719034}]}
{"index": 645, "beams": [{"orig_question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.13010486204166227}]}
{"index": 646, "beams": [{"orig_question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = 'terminal'", "score": -0.23789243363478363}]}
{"index": 647, "beams": [{"orig_question": "How many poker players are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM poker_player", "score": -0.0001900196075155236}]}
{"index": 648, "beams": [{"orig_question": "Count the number of poker players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM poker_player", "score": -0.00018334388730067985}]}
{"index": 649, "beams": [{"orig_question": "List the earnings of poker players in descending order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings Desc", "score": -0.00030004978162878615}]}
{"index": 650, "beams": [{"orig_question": "What are the earnings of poker players, ordered descending by value?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings Desc", "score": -0.0003337860107421875}]}
{"index": 651, "beams": [{"orig_question": "List the final tables made and the best finishes of poker players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -0.0005877017974569299}]}
{"index": 652, "beams": [{"orig_question": "What are the final tables made and best finishes for all poker players?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -0.00025701521917653736}]}
{"index": 653, "beams": [{"orig_question": "What is the average earnings of poker players?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(poker_player.Earnings) FROM poker_player", "score": -0.00030994415283203125}]}
{"index": 654, "beams": [{"orig_question": "Return the average earnings across all poker players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(poker_player.Earnings) FROM poker_player", "score": -0.000347137451171875}]}
{"index": 655, "beams": [{"orig_question": "What is the money rank of the poker player with the highest earnings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings Desc LIMIT 1", "score": -0.00039482116675060297}]}
{"index": 656, "beams": [{"orig_question": "Return the money rank of the player with the greatest earnings.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings Desc LIMIT 1", "score": -0.00033009052275900785}]}
{"index": 657, "beams": [{"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Max(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 'terminal'", "score": -0.001188278197219006}]}
{"index": 658, "beams": [{"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Max(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 'terminal'", "score": -0.0010910034175140026}]}
{"index": 659, "beams": [{"orig_question": "What are the names of poker players?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people", "score": -0.00042438507080078125}]}
{"index": 660, "beams": [{"orig_question": "Return the names of all the poker players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people", "score": -0.0004425048828125}]}
{"index": 661, "beams": [{"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people WHERE poker_player.Earnings > 'terminal'", "score": -0.00042247772216796875}]}
{"index": 662, "beams": [{"orig_question": "Give the names of poker players who have earnings above 300000.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people WHERE poker_player.Earnings > 'terminal'", "score": -0.0004119873046875}]}
{"index": 663, "beams": [{"orig_question": "List the names of poker players ordered by the final tables made in ascending order.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Final_Table_Made Asc", "score": -0.0005810260640828346}]}
{"index": 664, "beams": [{"orig_question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Final_Table_Made Asc", "score": -0.0006213183753516205}]}
{"index": 665, "beams": [{"orig_question": "What is the birth date of the poker player with the lowest earnings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ORDER BY poker_player.Earnings Asc LIMIT 1", "score": -0.0006910539882412081}]}
{"index": 666, "beams": [{"orig_question": "Return the birth date of the poker player with the lowest earnings.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ORDER BY poker_player.Earnings Asc LIMIT 1", "score": -0.03382065519599564}]}
{"index": 667, "beams": [{"orig_question": "What is the money rank of the tallest poker player?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ORDER BY people.Height Desc LIMIT 1", "score": -0.0006374115913558853}]}
{"index": 668, "beams": [{"orig_question": "Return the money rank of the poker player with the greatest height.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ORDER BY people.Height Desc LIMIT 1", "score": -0.0005562305373700838}]}
{"index": 669, "beams": [{"orig_question": "What is the average earnings of poker players with height higher than 200?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(poker_player.Earnings) FROM poker_player JOIN people WHERE people.Height > 'terminal'", "score": -0.0006700754159396638}]}
{"index": 670, "beams": [{"orig_question": "Give average earnings of poker players who are taller than 200.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Avg(poker_player.Earnings) FROM poker_player JOIN people WHERE people.Height > 'terminal'", "score": -0.018590817126039383}]}
{"index": 671, "beams": [{"orig_question": "What are the names of poker players in descending order of earnings?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Earnings Desc", "score": -0.0006028413619958428}]}
{"index": 672, "beams": [{"orig_question": "Return the names of poker players sorted by their earnings descending.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Earnings Desc", "score": -0.0005888922314554179}]}
{"index": 673, "beams": [{"orig_question": "What are different nationalities of people and the corresponding number of people from each nation?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality, Count(*) FROM people GROUP BY people.Nationality", "score": -0.00043773651123046875}]}
{"index": 674, "beams": [{"orig_question": "How many people are there of each nationality?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality, Count(*) FROM people GROUP BY people.Nationality", "score": -0.0005292892456054688}]}
{"index": 675, "beams": [{"orig_question": "What is the most common nationality of people?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality FROM people GROUP BY people.Nationality ORDER BY Count(*) Desc LIMIT 1", "score": -0.000423431396484375}]}
{"index": 676, "beams": [{"orig_question": "Give the nationality that is most common across all people.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality FROM people GROUP BY people.Nationality ORDER BY Count(*) Desc LIMIT 1", "score": -0.00043392181396484375}]}
{"index": 677, "beams": [{"orig_question": "What are the nationalities that are shared by at least two people?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING Count(*) >= 'terminal'", "score": -0.0008592605590820312}]}
{"index": 678, "beams": [{"orig_question": "Return the nationalities for which there are two or more people.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING Count(*) >= 'terminal'", "score": -0.0014429092407226562}]}
{"index": 679, "beams": [{"orig_question": "List the names and birth dates of people in ascending alphabetical order of name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name Asc", "score": -0.0005283355712890625}]}
{"index": 680, "beams": [{"orig_question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name Asc", "score": -0.0006055831909179688}]}
{"index": 681, "beams": [{"orig_question": "Show names of people whose nationality is not \"Russia\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != 'terminal'", "score": -0.0008792877197265625}]}
{"index": 682, "beams": [{"orig_question": "What are the names of people who are not from Russia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != 'terminal'", "score": -0.000919342041015625}]}
{"index": 683, "beams": [{"orig_question": "List the names of people that are not poker players.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM people WHERE people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)", "score": -0.0009062290191508282}]}
{"index": 684, "beams": [{"orig_question": "What are the names of people who do not play poker?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT people.Name FROM people WHERE people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)", "score": -0.0010941028594828595}]}
{"index": 685, "beams": [{"orig_question": "How many distinct nationalities are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT people.Nationality) FROM people", "score": -0.00020599365234375}]}
{"index": 686, "beams": [{"orig_question": "Count the number of different nationalities.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT people.Nationality) FROM people", "score": -0.00019550323486328125}]}
{"index": 687, "beams": [{"orig_question": "How many states are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM AREA_CODE_STATE", "score": -0.003380482321517775}]}
{"index": 688, "beams": [{"orig_question": "List the contestant numbers and names, ordered by contestant name descending.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name Desc", "score": -0.0004333257674815627}]}
{"index": 689, "beams": [{"orig_question": "List the vote ids, phone numbers and states of all votes.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES", "score": -0.0009119510650350549}]}
{"index": 690, "beams": [{"orig_question": "What are the maximum and minimum values of area codes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Max(AREA_CODE_STATE.area_code), Min(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE", "score": -0.001644849451565733}]}
{"index": 691, "beams": [{"orig_question": "What is last date created of votes from the state 'CA'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Max(VOTES.created) FROM VOTES WHERE VOTES.state = 'terminal'", "score": -0.0005208253860402579}]}
{"index": 692, "beams": [{"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != 'terminal'", "score": -0.001193165779106664}]}
{"index": 693, "beams": [{"orig_question": "What are the distinct states and create time of all votes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES", "score": -0.0003829002380371094}]}
{"index": 694, "beams": [{"orig_question": "What are the contestant numbers and names of the contestants who had at least two votes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES GROUP BY CONTESTANTS.contestant_number HAVING Count(*) >= 'terminal'", "score": -0.053794175378470754}]}
{"index": 695, "beams": [{"orig_question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ORDER BY VOTES.contestant_number Asc LIMIT 1", "score": -0.07260435065103366}]}
{"index": 696, "beams": [{"orig_question": "What are the number of votes from state 'NY' or 'CA'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM VOTES WHERE VOTES.state = 'terminal' OR VOTES.state = 'terminal'", "score": -0.19987857341055815}]}
{"index": 697, "beams": [{"orig_question": "How many contestants did not get voted?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM CONTESTANTS WHERE CONTESTANTS.contestant_number NOT IN (SELECT VOTES.contestant_number FROM VOTES)", "score": -0.0023626089095714065}]}
{"index": 698, "beams": [{"orig_question": "What is the area code in which the most voters voted?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES GROUP BY AREA_CODE_STATE.area_code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008903741542667376}]}
{"index": 699, "beams": [{"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS WHERE CONTESTANTS.contestant_name = 'terminal'", "score": -0.15915837882214845}]}
{"index": 700, "beams": [{"orig_question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS JOIN AREA_CODE_STATE WHERE CONTESTANTS.contestant_name = 'terminal' INTERSECT SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS WHERE CONTESTANTS.contestant_name = 'terminal'", "score": -2.540680151698723}]}
{"index": 701, "beams": [{"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE 'terminal'", "score": -0.00047123432158713285}]}
{"index": 702, "beams": [{"orig_question": "What are the names of all the countries that became independent after 1950?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 'terminal'", "score": -0.00025570392607932035}]}
{"index": 703, "beams": [{"orig_question": "Give the names of the nations that were founded after 1950.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 'terminal'", "score": -0.00031793117000233906}]}
{"index": 704, "beams": [{"orig_question": "How many countries have a republic as their form of government?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM country WHERE country.GovernmentForm = 'terminal'", "score": -0.00020778177577085444}]}
{"index": 705, "beams": [{"orig_question": "How many countries have governments that are republics?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM country WHERE country.GovernmentForm = 'terminal'", "score": -0.00023078849698521253}]}
{"index": 706, "beams": [{"orig_question": "What is the total surface area of the countries in the Caribbean region?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Region = 'terminal'", "score": -0.0004119873046875}]}
{"index": 707, "beams": [{"orig_question": "How much surface area do the countires in the Carribean cover together?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Region = 'terminal'", "score": -0.0009084558696486056}]}
{"index": 708, "beams": [{"orig_question": "Which continent is Anguilla in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Continent FROM country WHERE country.Name = 'terminal'", "score": -0.08059550076723099}]}
{"index": 709, "beams": [{"orig_question": "What is the continent name which Anguilla belongs to?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Continent FROM country WHERE country.LocalName = 'terminal'", "score": -0.06791422516107559}]}
{"index": 710, "beams": [{"orig_question": "Which region is the city Kabul located in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region FROM city JOIN country WHERE city.Name = 'terminal'", "score": -0.0006777044702630519}]}
{"index": 711, "beams": [{"orig_question": "What region is Kabul in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region FROM city JOIN country WHERE city.Name = 'terminal'", "score": -0.012415766704975795}]}
{"index": 712, "beams": [{"orig_question": "Which language is the most popular in Aruba?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.Name = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.019577485561910635}]}
{"index": 713, "beams": [{"orig_question": "What language is predominantly spoken in Aruba?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.Name = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.03925986580088647}]}
{"index": 714, "beams": [{"orig_question": "What are the population and life expectancies in Brazil?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'terminal'", "score": -0.00027608871448592254}]}
{"index": 715, "beams": [{"orig_question": "Give me Brazil\u2019s population and life expectancies.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'terminal'", "score": -0.00028181076038436004}]}
{"index": 716, "beams": [{"orig_question": "What are the region and population of Angola?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = 'terminal'", "score": -0.0002683401107219652}]}
{"index": 717, "beams": [{"orig_question": "What region does Angola belong to and what is its population?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region, country.Population FROM country WHERE country.Name = 'terminal'", "score": -0.017404217272655842}]}
{"index": 718, "beams": [{"orig_question": "What is the average expected life expectancy for countries in the region of Central Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Region = 'terminal'", "score": -0.0003484487524474389}]}
{"index": 719, "beams": [{"orig_question": "How long is the people\u2019s average life expectancy in Central Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Region = 'terminal'", "score": -0.0013769338838756084}]}
{"index": 720, "beams": [{"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.LifeExpectancy = (SELECT Min(country.LifeExpectancy) FROM country WHERE country.Continent = 'terminal')", "score": -0.03123293968362617}]}
{"index": 721, "beams": [{"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.LifeExpectancy = (SELECT Min(country.LifeExpectancy) FROM country WHERE country.Continent = 'terminal')", "score": -0.14605434332042933}]}
{"index": 722, "beams": [{"orig_question": "What is the total population and maximum GNP in Asia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.Population), Max(country.GNP) FROM country WHERE country.Continent = 'terminal'", "score": -0.4551780223845867}]}
{"index": 723, "beams": [{"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Population, Sum(country.GNP) FROM country WHERE country.Continent = 'terminal'", "score": -0.7536138504510745}]}
{"index": 724, "beams": [{"orig_question": "What is the average life expectancy in African countries that are republics?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = 'terminal' AND country.Name = 'terminal'", "score": -0.20951865939423442}]}
{"index": 725, "beams": [{"orig_question": "Give the average life expectancy for countries in Africa which are republics?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Continent = 'terminal' AND country.GovernmentForm = 'terminal'", "score": -0.010399079066694128}]}
{"index": 726, "beams": [{"orig_question": "What is the total surface area of the continents Asia and Europe?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal' INTERSECT SELECT country.Region FROM country WHERE country.Continent = 'terminal'", "score": -0.9118329748380276}]}
{"index": 727, "beams": [{"orig_question": "Give the total surface area covered by countries in Asia or Europe.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal' OR country.Continent = 'terminal'", "score": -0.0007598400109074532}]}
{"index": 728, "beams": [{"orig_question": "How many people live in Gelderland district?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT city.Population FROM city WHERE city.District = 'terminal'", "score": -0.00025773024025710356}]}
{"index": 729, "beams": [{"orig_question": "What is the total population of Gelderland district?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Sum(city.Population) FROM city WHERE city.District = 'terminal'", "score": -0.00040185451257457316}]}
{"index": 730, "beams": [{"orig_question": "What is the average GNP and total population in all nations whose government is US territory?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.GNP), Avg(country.Population) FROM country WHERE country.GovernmentForm = 'terminal'", "score": -0.014135599062683468}]}
{"index": 731, "beams": [{"orig_question": "Give the mean GNP and total population of nations which are considered US territory.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.GNP), Sum(country.Population) FROM country WHERE country.GovernmentForm = 'terminal'", "score": -0.23815573708861848}]}
{"index": 732, "beams": [{"orig_question": "How many unique languages are spoken in the world?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -0.00017678737117421406}]}
{"index": 733, "beams": [{"orig_question": "What is the number of distinct languages used around the world?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -0.00016510486148035852}]}
{"index": 734, "beams": [{"orig_question": "How many type of governments are in Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = 'terminal'", "score": -0.020597990602254868}]}
{"index": 735, "beams": [{"orig_question": "How many different forms of governments are there in Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = 'terminal'", "score": -0.0003249592409702018}]}
{"index": 736, "beams": [{"orig_question": "What is the total number of languages used in Aruba?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country WHERE country.Name = 'terminal'", "score": -0.013893286904021807}]}
{"index": 737, "beams": [{"orig_question": "How many languages are spoken in Aruba?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country WHERE country.LocalName = 'terminal'", "score": -0.7742499410992423}]}
{"index": 738, "beams": [{"orig_question": "How many official languages does Afghanistan have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country WHERE country.Name = 'terminal'", "score": -0.004330286867116229}]}
{"index": 739, "beams": [{"orig_question": "How many official languages are spoken in Afghanistan?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country WHERE country.Name = 'terminal'", "score": -0.028247644385146486}]}
{"index": 740, "beams": [{"orig_question": "What is name of the country that speaks the largest number of languages?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM countrylanguage JOIN country GROUP BY countrylanguage.CountryCode ORDER BY Count(*) Desc LIMIT 1", "score": -0.24714423124532914}]}
{"index": 741, "beams": [{"orig_question": "Give the name of the nation that uses the greatest amount of languages.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage GROUP BY countrylanguage.CountryCode ORDER BY Count(*) Desc LIMIT 1", "score": -0.282396448290001}]}
{"index": 742, "beams": [{"orig_question": "Which continent has the most diverse languages?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Continent FROM countrylanguage JOIN country GROUP BY country.Continent ORDER BY Count(*) Desc LIMIT 1", "score": -0.013897982949842458}]}
{"index": 743, "beams": [{"orig_question": "Which continent speaks the most languages?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Continent FROM countrylanguage JOIN country GROUP BY country.Continent ORDER BY Count(*) Desc LIMIT 1", "score": -0.03341453888853607}]}
{"index": 744, "beams": [{"orig_question": "How many countries speak both English and Dutch?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -1.3179501336707915}]}
{"index": 745, "beams": [{"orig_question": "What is the number of nations that use English and Dutch?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}], "having": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM countrylanguage GROUP BY countrylanguage.Language HAVING countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -1.8140760361921764}]}
{"index": 746, "beams": [{"orig_question": "What are the names of nations speak both English and French?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.782795471004647}]}
{"index": 747, "beams": [{"orig_question": "Give the names of nations that speak both English and French.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.04016463491688427}]}
{"index": 748, "beams": [{"orig_question": "What are the names of nations where both English and French are official languages?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.001960726478472452}]}
{"index": 749, "beams": [{"orig_question": "Give the names of countries with English and French as official languages.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' INTERSECT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.005036213838081949}]}
{"index": 750, "beams": [{"orig_question": "What is the number of distinct continents where Chinese is spoken?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT country.Continent) FROM countrylanguage JOIN country WHERE countrylanguage.Language = 'terminal'", "score": -0.00445935409514675}]}
{"index": 751, "beams": [{"orig_question": "How many continents speak Chinese?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(DISTINCT country.Continent) FROM countrylanguage JOIN country WHERE countrylanguage.Language = 'terminal'", "score": -0.003244487622851011}]}
{"index": 752, "beams": [{"orig_question": "What are the regions that use English or Dutch?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region FROM countrylanguage JOIN country WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'", "score": -0.032263340428443144}]}
{"index": 753, "beams": [{"orig_question": "Which regions speak Dutch or English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Region FROM countrylanguage JOIN country WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'", "score": -0.020360358059292594}]}
{"index": 754, "beams": [{"orig_question": "What are the countries where either English or Dutch is the official language ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'", "score": -1.1657472151182375}]}
{"index": 755, "beams": [{"orig_question": "Which countries have either English or Dutch as an official language?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' OR countrylanguage.Language = 'terminal'", "score": -0.32203364359906317}]}
{"index": 756, "beams": [{"orig_question": "Which language is the most popular on the Asian continent?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.Continent = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.0528683559101637}]}
{"index": 757, "beams": [{"orig_question": "What is the language that is used by the largest number of Asian nations?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.Continent = 'terminal' GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.0011745541692107508}]}
{"index": 758, "beams": [{"orig_question": "Which languages are spoken by only one country in republic governments?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}], "having": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(*) = 'terminal'", "score": -0.6728428619735496}]}
{"index": 759, "beams": [{"orig_question": "What languages are only used by a single country with a republic government?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}], "having": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.GovernmentForm = 'terminal' GROUP BY countrylanguage.Language HAVING Count(country.GovernmentForm) = 'terminal'", "score": -0.5491402921971371}]}
{"index": 760, "beams": [{"orig_question": "Find the city with the largest population that uses English.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT city.Name FROM city JOIN country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' ORDER BY city.Population Desc LIMIT 1", "score": -1.7592311131274911}]}
{"index": 761, "beams": [{"orig_question": "What is the most populace city that speaks English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT city.Name FROM city JOIN country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' ORDER BY city.Population Desc LIMIT 1", "score": -0.17536689113512693}]}
{"index": 762, "beams": [{"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country ORDER BY country.SurfaceArea Desc LIMIT 1", "score": -0.1647215740521233}]}
{"index": 763, "beams": [{"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.SurfaceArea = (SELECT Max(country.SurfaceArea) FROM country)", "score": -0.07620680280143688}]}
{"index": 764, "beams": [{"orig_question": "What is average life expectancy in the countries where English is not the official language?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')", "score": -0.4620403347412321}]}
{"index": 765, "beams": [{"orig_question": "Give the mean life expectancy of countries in which English is not the official language.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')", "score": -1.0340185439515608}]}
{"index": 766, "beams": [{"orig_question": "What is the total number of people living in the nations that do not use English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Sum(city.Population) FROM city JOIN countrylanguage WHERE countrylanguage.Language != 'terminal'", "score": -8.21749988578813}]}
{"index": 767, "beams": [{"orig_question": "How many people live in countries that do not speak English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT city.Population FROM city WHERE city.CountryCode NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')", "score": -0.0262997219537624}]}
{"index": 768, "beams": [{"orig_question": "What is the official language spoken in the country whose head of state is Beatrix?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.HeadOfState = 'terminal'", "score": -0.0055178629872898455}]}
{"index": 769, "beams": [{"orig_question": "What is the official language used in the country the name of whose head of state is Beatrix.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.HeadOfState = 'terminal'", "score": -0.0011124745358870314}]}
{"index": 770, "beams": [{"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 'terminal'", "score": -0.16050440715525838}]}
{"index": 771, "beams": [{"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT country.Name) FROM country JOIN countrylanguage WHERE country.IndepYear < 'terminal'", "score": -0.12219680058024096}]}
{"index": 772, "beams": [{"orig_question": "What are the countries that have greater surface area than any country in Europe?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT Max(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal')", "score": -0.004248619079589844}]}
{"index": 773, "beams": [{"orig_question": "Which countries have greater area than that of any country in Europe?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT Max(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal')", "score": -0.008559703786879425}]}
{"index": 774, "beams": [{"orig_question": "What are the African countries that have a  population less than any country in Asia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Population < (SELECT Max(country.Population) FROM country WHERE country.Continent = 'terminal')", "score": -0.03436674002836071}]}
{"index": 775, "beams": [{"orig_question": "Which African countries have a smaller population than that of any country in Asia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Population < (SELECT Min(country.Population) FROM country WHERE country.Continent = 'terminal' AND country.Continent = 'terminal')", "score": -0.6635078564268895}]}
{"index": 776, "beams": [{"orig_question": "Which Asian countries have a population that is larger than any country in Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Continent = 'terminal') AND country.Continent = 'terminal'", "score": -0.3055222845850807}]}
{"index": 777, "beams": [{"orig_question": "What are the Asian countries which have a population larger than that of any country in Africa?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Continent = 'terminal')", "score": -0.18231739672492608}]}
{"index": 778, "beams": [{"orig_question": "What are the country codes for countries that do not speak English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')", "score": -0.014470047285605858}]}
{"index": 779, "beams": [{"orig_question": "Return the country codes for countries that do not speak English.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal')", "score": -0.010899978020461276}]}
{"index": 780, "beams": [{"orig_question": "What are the country codes of countries where people use languages other than English?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Code FROM country JOIN countrylanguage WHERE countrylanguage.Language != 'terminal'", "score": -9.60676096798852}]}
{"index": 781, "beams": [{"orig_question": "Give the country codes for countries in which people speak langauges that are not English.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Code FROM country JOIN countrylanguage WHERE countrylanguage.Language != 'terminal'", "score": -9.425151190138422}]}
{"index": 782, "beams": [{"orig_question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Code FROM country WHERE countrylanguage.CountryCode NOT IN (SELECT countrylanguage.CountryCode FROM country WHERE country.GovernmentForm = 'terminal')", "score": -0.3259761040098965}]}
{"index": 783, "beams": [{"orig_question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Code FROM country WHERE countrylanguage.Language = 'terminal' EXCEPT SELECT countrylanguage.CountryCode FROM country WHERE country.GovernmentForm = 'terminal'", "score": -0.08710924948078969}]}
{"index": 784, "beams": [{"orig_question": "Which cities are in European countries where English is not the official language?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT city.Name FROM city JOIN country JOIN countrylanguage WHERE country.Continent = 'terminal' AND countrylanguage.Language != 'terminal'", "score": -0.46259082825417863}]}
{"index": 785, "beams": [{"orig_question": "What are the names of cities in Europe for which English is not the official language?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT city.Name FROM city JOIN country JOIN countrylanguage WHERE country.Continent = 'terminal' AND countrylanguage.Language != 'terminal'", "score": -3.328799452574458}]}
{"index": 786, "beams": [{"orig_question": "Which unique cities are in Asian countries where Chinese is the official language ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT city.Name FROM city JOIN country JOIN countrylanguage WHERE countrylanguage.IsOfficial = 'terminal' AND countrylanguage.Language = 'terminal'", "score": -1.1386152710752526}]}
{"index": 787, "beams": [{"orig_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT DISTINCT city.Name FROM city JOIN country JOIN countrylanguage WHERE country.Continent = 'terminal' AND countrylanguage.Language = 'terminal'", "score": -0.024204732741964108}]}
{"index": 788, "beams": [{"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population Asc LIMIT 1", "score": -0.0011734962231386703}]}
{"index": 789, "beams": [{"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population Asc LIMIT 1", "score": -0.0011506073705334074}]}
{"index": 790, "beams": [{"orig_question": "What are the population, name and leader of the country with the largest area?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea Desc LIMIT 1", "score": -0.0013564823339038412}]}
{"index": 791, "beams": [{"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea Desc LIMIT 1", "score": -0.0012521712523039241}]}
{"index": 792, "beams": [{"orig_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage GROUP BY country.Name HAVING Count(*) >= 'terminal'", "score": -0.0051216676819976215}]}
{"index": 793, "beams": [{"orig_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage GROUP BY country.Name HAVING Count(*) > 'terminal'", "score": -0.004806274293962076}]}
{"index": 794, "beams": [{"orig_question": "Find the number of cities in each district whose population is greater than the average population of cities?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*), city.District FROM city WHERE city.Population > (SELECT Avg(city.Population) FROM city) GROUP BY city.District", "score": -0.006011128218162298}]}
{"index": 795, "beams": [{"orig_question": "How many cities in each district have a population that is above the average population across all cities?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*), city.District FROM city WHERE city.Population > (SELECT Avg(city.Population) FROM city) GROUP BY city.District", "score": -0.0031517740425144325}]}
{"index": 796, "beams": [{"orig_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Avg"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.GovernmentForm, Sum(country.Population) FROM country GROUP BY country.GovernmentForm HAVING Avg(country.LifeExpectancy) > 'terminal'", "score": -0.011881646700196313}]}
{"index": 797, "beams": [{"orig_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 19, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Avg"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.GovernmentForm, Sum(country.Population) FROM country GROUP BY country.GovernmentForm HAVING Avg(country.LifeExpectancy) > 'terminal'", "score": -0.01859890109767548}]}
{"index": 798, "beams": [{"orig_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Avg"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Avg(country.LifeExpectancy), Avg(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING Avg(country.LifeExpectancy) < 'terminal'", "score": -0.07677881640817219}]}
{"index": 799, "beams": [{"orig_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Avg"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Continent, Sum(country.Population), Avg(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING Avg(country.LifeExpectancy) < 'terminal'", "score": -0.6385134450022178}]}
{"index": 800, "beams": [{"orig_question": "What are the names and areas of countries with the top 5 largest area?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea Desc LIMIT 1", "score": -0.0005027048582562088}]}
{"index": 801, "beams": [{"orig_question": "Return the names and surface areas of the 5 largest countries.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea Desc LIMIT 1", "score": -0.0004949569700940515}]}
{"index": 802, "beams": [{"orig_question": "What are names of countries with the top 3 largest population?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population Desc LIMIT 1", "score": -0.00035810469671559986}]}
{"index": 803, "beams": [{"orig_question": "Return the names of the 3 most populated countries.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population Desc LIMIT 1", "score": -0.00042212006882635933}]}
{"index": 804, "beams": [{"orig_question": "What are the names of the nations with the 3 lowest populations?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population Asc LIMIT 1", "score": -0.016562255982989882}]}
{"index": 805, "beams": [{"orig_question": "Return the names of the 3 countries with the fewest people.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country ORDER BY country.Population Asc LIMIT 1", "score": -0.16286190098617226}]}
{"index": 806, "beams": [{"orig_question": "how many countries are in Asia?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM country WHERE country.Continent = 'terminal'", "score": -0.0002262576779230585}]}
{"index": 807, "beams": [{"orig_question": "Count the number of countries in Asia.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM country WHERE country.Continent = 'terminal'", "score": -0.0007160670529628987}]}
{"index": 808, "beams": [{"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population > 'terminal'", "score": -0.007779836527333828}]}
{"index": 809, "beams": [{"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = 'terminal' AND country.Population > 'terminal'", "score": -0.5177288055351639}]}
{"index": 810, "beams": [{"orig_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.Population), Avg(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal' AND country.SurfaceArea > 'terminal'", "score": -0.32831963896676797}]}
{"index": 811, "beams": [{"orig_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "And", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Sum(country.Population), Avg(country.SurfaceArea) FROM country WHERE country.Continent = 'terminal' AND country.SurfaceArea > 'terminal'", "score": -0.07319397106606829}]}
{"index": 812, "beams": [{"orig_question": "What are the cities whose population is between 160000 and 900000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 'terminal' AND 'terminal'", "score": -0.002081751758851169}]}
{"index": 813, "beams": [{"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Between", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}, "val2": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 'terminal' AND 'terminal'", "score": -0.0022011995315480704}]}
{"index": 814, "beams": [{"orig_question": "Which language is spoken by the largest number of countries?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.00046658515928754696}]}
{"index": 815, "beams": [{"orig_question": "Give the language that is spoken in the most countries.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004574060438855554}]}
{"index": 816, "beams": [{"orig_question": "What is the language spoken by the largest percentage of people in each country?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT countrylanguage.Language, Max(country.Population) FROM countrylanguage JOIN country GROUP BY country.Name", "score": -0.23910702473858692}]}
{"index": 817, "beams": [{"orig_question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT city.CountryCode, countrylanguage.Language FROM country JOIN countrylanguage JOIN city GROUP BY city.CountryCode", "score": -19.890780374083988}]}
{"index": 818, "beams": [{"orig_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(DISTINCT country.Name) FROM country JOIN countrylanguage WHERE countrylanguage.Language = 'terminal' ORDER BY countrylanguage.Percentage Desc LIMIT 1", "score": -0.7733010151423514}]}
{"index": 819, "beams": [{"orig_question": "Count the number of countries for which Spanish is the predominantly spoken language.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.16580962764282958}]}
{"index": 820, "beams": [{"orig_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal' ORDER BY countrylanguage.Percentage Desc LIMIT 1", "score": -0.4411291280412115}]}
{"index": 821, "beams": [{"orig_question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'terminal'", "score": -0.40818119049072266}]}
{"index": 822, "beams": [{"orig_question": "How many conductors are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM conductor", "score": -0.00020802018707399839}]}
{"index": 823, "beams": [{"orig_question": "Count the number of conductors.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM conductor", "score": -0.0002329348560579092}]}
{"index": 824, "beams": [{"orig_question": "List the names of conductors in ascending order of age.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Age Asc", "score": -0.0003998279564711993}]}
{"index": 825, "beams": [{"orig_question": "What are the names of conductors, ordered by age?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Age Asc", "score": -0.00041973590850119535}]}
{"index": 826, "beams": [{"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != 'terminal'", "score": -0.000926971435546875}]}
{"index": 827, "beams": [{"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != 'terminal'", "score": -0.0009937286376953125}]}
{"index": 828, "beams": [{"orig_question": "What are the record companies of orchestras in descending order of years in which they were founded?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded Desc", "score": -0.00029528141013202003}]}
{"index": 829, "beams": [{"orig_question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded Desc", "score": -0.0003008842402323353}]}
{"index": 830, "beams": [{"orig_question": "What is the average attendance of shows?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Avg(show.Attendance) FROM show", "score": -0.00032711029052734375}]}
{"index": 831, "beams": [{"orig_question": "Return the average attendance across all shows.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Avg(show.Attendance) FROM show", "score": -0.0002803802490234375}]}
{"index": 832, "beams": [{"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Max(performance.Share), Min(performance.Share) FROM performance WHERE performance.Type != 'terminal'", "score": -0.0018477439876676272}]}
{"index": 833, "beams": [{"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 18, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 14, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Max(performance.Share), Min(performance.Share) FROM performance WHERE performance.Type != 'terminal'", "score": -0.0017553567879176057}]}
{"index": 834, "beams": [{"orig_question": "How many different nationalities do conductors have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT conductor.Nationality) FROM conductor", "score": -0.00020349024862298393}]}
{"index": 835, "beams": [{"orig_question": "Count the number of different nationalities of conductors.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(DISTINCT conductor.Nationality) FROM conductor", "score": -0.0001934766701197077}]}
{"index": 836, "beams": [{"orig_question": "List names of conductors in descending order of years of work.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc", "score": -0.00029003620146994535}]}
{"index": 837, "beams": [{"orig_question": "What are the names of conductors, sorted descending by the number of years they have worked?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc", "score": -0.00031232833759986534}]}
{"index": 838, "beams": [{"orig_question": "List the name of the conductor with the most years of work.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc LIMIT 1", "score": -0.0002815723418905236}]}
{"index": 839, "beams": [{"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work Desc LIMIT 1", "score": -0.00030040740966796875}]}
{"index": 840, "beams": [{"orig_question": "Show the names of conductors and the orchestras they have conducted.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra", "score": -0.0005935428807504195}]}
{"index": 841, "beams": [{"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra", "score": -0.13730309903620963}]}
{"index": 842, "beams": [{"orig_question": "Show the names of conductors that have conducted more than one orchestras.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra GROUP BY orchestra.Conductor_ID HAVING Count(*) > 'terminal'", "score": -0.01203007070574813}]}
{"index": 843, "beams": [{"orig_question": "What are the names of conductors who have conducted at more than one orchestra?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra GROUP BY orchestra.Conductor_ID HAVING Count(*) > 'terminal'", "score": -0.0008606643820030513}]}
{"index": 844, "beams": [{"orig_question": "Show the name of the conductor that has conducted the most number of orchestras.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra GROUP BY orchestra.Conductor_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.06483083218336105}]}
{"index": 845, "beams": [{"orig_question": "What is the name of the conductor who has conducted the most orchestras?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra GROUP BY orchestra.Conductor_ID ORDER BY Count(*) Desc LIMIT 1", "score": -0.0015148197976415645}]}
{"index": 846, "beams": [{"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra WHERE orchestra.Year_of_Founded > 'terminal'", "score": -0.0005031823611645336}]}
{"index": 847, "beams": [{"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra WHERE orchestra.Year_of_Founded > 'terminal'", "score": -0.00041794771877334824}]}
{"index": 848, "beams": [{"orig_question": "Please show the different record companies and the corresponding number of orchestras.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company, Count(*) FROM orchestra GROUP BY orchestra.Record_Company", "score": -0.00045788288115744535}]}
{"index": 849, "beams": [{"orig_question": "How many orchestras does each record company manage?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company, Count(*) FROM orchestra GROUP BY orchestra.Record_Company", "score": -0.0005077123641399339}]}
{"index": 850, "beams": [{"orig_question": "Please show the record formats of orchestras in ascending order of count.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Major_Record_Format FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY Count(*) Asc", "score": -0.00439286231946312}]}
{"index": 851, "beams": [{"orig_question": "What are the major record formats of orchestras, sorted by their frequency?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Major_Record_Format FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY Count(*) Asc", "score": -0.0036664009093669847}]}
{"index": 852, "beams": [{"orig_question": "List the record company shared by the most number of orchestras.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY Count(*) Desc LIMIT 1", "score": -0.0004558563232421875}]}
{"index": 853, "beams": [{"orig_question": "What is the record company used by the greatest number of orchestras?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY Count(*) Desc LIMIT 1", "score": -0.000461578369140625}]}
{"index": 854, "beams": [{"orig_question": "List the names of orchestras that have no performance.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)", "score": -0.0010370016097809298}]}
{"index": 855, "beams": [{"orig_question": "What are the orchestras that do not have any performances?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)", "score": -0.0020897116918376923}]}
{"index": 856, "beams": [{"orig_question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal' INTERSECT SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded > 'terminal'", "score": -0.00313663482256743}]}
{"index": 857, "beams": [{"orig_question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 'terminal' INTERSECT SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded > 'terminal'", "score": -0.0013689994721062249}]}
{"index": 858, "beams": [{"orig_question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM orchestra WHERE orchestra.Major_Record_Format = 'terminal' OR orchestra.Major_Record_Format = 'terminal'", "score": -0.0005265474319386954}]}
{"index": 859, "beams": [{"orig_question": "Count the number of orchestras that have CD or DVD as their record format.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM orchestra WHERE orchestra.Major_Record_Format = 'terminal' OR orchestra.Major_Record_Format = 'terminal'", "score": -0.0007069110870077111}]}
{"index": 860, "beams": [{"orig_question": "Show the years in which orchestras that have given more than one performance are founded.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance GROUP BY orchestra.Year_of_Founded HAVING Count(*) > 'terminal'", "score": -0.0011631812085255433}]}
{"index": 861, "beams": [{"orig_question": "What are years of founding for orchestras that have had more than a single performance?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance GROUP BY orchestra.Year_of_Founded HAVING Count(*) > 'terminal'", "score": -0.017828326672315598}]}
{"index": 862, "beams": [{"orig_question": "How many high schoolers are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler", "score": -0.0002266168330606888}]}
{"index": 863, "beams": [{"orig_question": "Count the number of high schoolers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler", "score": -0.00021541117030210444}]}
{"index": 864, "beams": [{"orig_question": "Show the names and grades of each high schooler.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name, Highschooler.grade FROM Highschooler", "score": -0.0003589391707805589}]}
{"index": 865, "beams": [{"orig_question": "What are the names and grades for each high schooler?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name, Highschooler.grade FROM Highschooler", "score": -0.0004341602325155236}]}
{"index": 866, "beams": [{"orig_question": "Show all the grades of the high schoolers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT Highschooler.grade FROM Highschooler", "score": -0.00017881393432617188}]}
{"index": 867, "beams": [{"orig_question": "What is the grade of each high schooler?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT Highschooler.grade FROM Highschooler", "score": -0.09431827068323173}]}
{"index": 868, "beams": [{"orig_question": "What grade is Kyle in?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'terminal'", "score": -0.015075206756591797}]}
{"index": 869, "beams": [{"orig_question": "Return the grade for the high schooler named Kyle.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'terminal'", "score": -0.09538555145263672}]}
{"index": 870, "beams": [{"orig_question": "Show the names of all high schoolers in grade 10.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 'terminal'", "score": -0.0001354217529296875}]}
{"index": 871, "beams": [{"orig_question": "What are the names of all high schoolers in grade 10?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 'terminal'", "score": -0.0001354217529296875}]}
{"index": 872, "beams": [{"orig_question": "Show the ID of the high schooler named Kyle.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'terminal'", "score": -0.00014972686767578125}]}
{"index": 873, "beams": [{"orig_question": "What is Kyle's id?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'terminal'", "score": -0.0001659393310546875}]}
{"index": 874, "beams": [{"orig_question": "How many high schoolers are there in grade 9 or 10?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler WHERE Highschooler.grade = 'terminal' OR Highschooler.grade = 'terminal'", "score": -0.0019909142510812217}]}
{"index": 875, "beams": [{"orig_question": "Count the number of high schoolers in grades 9 or 10.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler WHERE Highschooler.grade = 'terminal' OR Highschooler.grade = 'terminal'", "score": -0.0024431941928853007}]}
{"index": 876, "beams": [{"orig_question": "Show the number of high schoolers for each grade.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*), Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade", "score": -0.0005012750593778037}]}
{"index": 877, "beams": [{"orig_question": "How many high schoolers are in each grade?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*), Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade", "score": -0.0005772113779514143}]}
{"index": 878, "beams": [{"orig_question": "Which grade has the most high schoolers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade ORDER BY Count(*) Desc LIMIT 1", "score": -0.0005323886871195782}]}
{"index": 879, "beams": [{"orig_question": "Return the grade that has the greatest number of high schoolers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade ORDER BY Count(*) Desc LIMIT 1", "score": -0.000530242919921875}]}
{"index": 880, "beams": [{"orig_question": "Show me all grades that have at least 4 students.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING Count(*) >= 'terminal'", "score": -0.001397371159320926}]}
{"index": 881, "beams": [{"orig_question": "Which grades have 4 or more high schoolers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING Count(*) >= 'terminal'", "score": -0.001509666353740613}]}
{"index": 882, "beams": [{"orig_question": "Show the student IDs and numbers of friends corresponding to each.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Friend.student_id, Count(*) FROM Friend GROUP BY Friend.student_id", "score": -0.0006247758714721385}]}
{"index": 883, "beams": [{"orig_question": "How many friends does each student have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Friend", "score": -0.006818724330344139}]}
{"index": 884, "beams": [{"orig_question": "Show the names of high school students and their corresponding number of friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Friend GROUP BY Highschooler.name", "score": -0.1472394874435281}]}
{"index": 885, "beams": [{"orig_question": "What are the names of the high schoolers and how many friends does each have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Friend GROUP BY Highschooler.name", "score": -0.045032391448557973}]}
{"index": 886, "beams": [{"orig_question": "What is the name of the high schooler who has the greatest number of friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend GROUP BY Highschooler.name ORDER BY Count(*) Desc LIMIT 1", "score": -0.07653361139318804}]}
{"index": 887, "beams": [{"orig_question": "Return the name of the high school student with the most friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend GROUP BY Friend.student_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.10626619906452106}]}
{"index": 888, "beams": [{"orig_question": "Show the names of high schoolers who have at least 3 friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend GROUP BY Friend.student_id HAVING Count(*) >= 'terminal'", "score": -0.06917321844412072}]}
{"index": 889, "beams": [{"orig_question": "What are the names of high schoolers who have 3 or more friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend GROUP BY Friend.student_id HAVING Count(*) >= 'terminal'", "score": -0.0021185849200264784}]}
{"index": 890, "beams": [{"orig_question": "Show the names of all of the high schooler Kyle's friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.name = 'terminal'", "score": -0.0037723779678273672}]}
{"index": 891, "beams": [{"orig_question": "Return the names of friends of the high school student Kyle.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.name = 'terminal'", "score": -0.09820672869466307}]}
{"index": 892, "beams": [{"orig_question": "How many friends does the high school student Kyle have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(DISTINCT Friend.friend_id) FROM Highschooler JOIN Friend WHERE Highschooler.name = 'terminal'", "score": -0.059801660478107976}]}
{"index": 893, "beams": [{"orig_question": "Count the number of friends Kyle has.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler JOIN Friend WHERE Highschooler.name = 'terminal'", "score": -0.09006057266378065}]}
{"index": 894, "beams": [{"orig_question": "Show ids of all students who do not have any friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.ID FROM Highschooler EXCEPT SELECT Friend.student_id FROM Friend", "score": -0.0015285001554445898}]}
{"index": 895, "beams": [{"orig_question": "What are the ids of high school students who do not have friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.ID FROM Highschooler EXCEPT SELECT Friend.student_id FROM Friend", "score": -0.0013622041935832385}]}
{"index": 896, "beams": [{"orig_question": "Show names of all high school students who do not have any friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)", "score": -0.0009672633382180607}]}
{"index": 897, "beams": [{"orig_question": "What are the names of students who have no friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)", "score": -0.0008437632976026066}]}
{"index": 898, "beams": [{"orig_question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Highschooler.ID FROM Likes INTERSECT SELECT Friend.student_id FROM Friend", "score": -0.5200123379472643}]}
{"index": 899, "beams": [{"orig_question": "What are the ids of students who both have friends and are liked?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Friend.student_id FROM Friend INTERSECT SELECT Likes.student_id FROM Likes WHERE Likes.liked_id = 'terminal'", "score": -0.896468757011462}]}
{"index": 900, "beams": [{"orig_question": "Show name of all students who have some friends and also are liked by someone else.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Likes INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend", "score": -0.5246381087110876}]}
{"index": 901, "beams": [{"orig_question": "What are the names of high schoolers who both have friends and are liked?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Likes WHERE Highschooler.ID IN (SELECT Likes.student_id FROM Likes WHERE Likes.liked_id = 'terminal')", "score": -0.9973528999762493}]}
{"index": 902, "beams": [{"orig_question": "Count the number of likes for each student id.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Likes.student_id, Count(*) FROM Likes GROUP BY Likes.student_id", "score": -0.03391730414898575}]}
{"index": 903, "beams": [{"orig_question": "How many likes correspond to each student id?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 6, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Likes.student_id, Count(*) FROM Likes GROUP BY Likes.student_id", "score": -0.003617125097655105}]}
{"index": 904, "beams": [{"orig_question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Likes GROUP BY Highschooler.name", "score": -0.04331526408469699}]}
{"index": 905, "beams": [{"orig_question": "What are the names of high schoolers who have likes, and how many likes does each have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Likes GROUP BY Highschooler.name", "score": -0.001483982185163768}]}
{"index": 906, "beams": [{"orig_question": "What is the name of the high schooler who has the greatest number of likes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Likes GROUP BY Likes.liked_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.5705814354321248}]}
{"index": 907, "beams": [{"orig_question": "Give the name of the student with the most likes.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Likes JOIN Highschooler GROUP BY Likes.liked_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.7013681903117686}]}
{"index": 908, "beams": [{"orig_question": "Show the names of students who have at least 2 likes.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Likes JOIN Highschooler GROUP BY Likes.liked_id HAVING Count(*) >= 'terminal'", "score": -0.0032346247262182715}]}
{"index": 909, "beams": [{"orig_question": "What are the names of students who have 2 or more likes?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.name FROM Likes JOIN Highschooler GROUP BY Likes.liked_id HAVING Count(*) >= 'terminal'", "score": -0.07668565955913209}]}
{"index": 910, "beams": [{"orig_question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.grade > 'terminal' GROUP BY Friend.student_id HAVING Count(*) >= 'terminal'", "score": -0.5688802094201719}]}
{"index": 911, "beams": [{"orig_question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.grade > 'terminal' GROUP BY Highschooler.ID HAVING Count(*) >= 'terminal'", "score": -1.0963213319907368}]}
{"index": 912, "beams": [{"orig_question": "How many likes does Kyle have?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM Likes JOIN Highschooler WHERE Highschooler.name = 'terminal'", "score": -0.11846445160335861}]}
{"index": 913, "beams": [{"orig_question": "Return the number of likes that the high schooler named Kyle has.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Highschooler JOIN Likes WHERE Highschooler.name = 'terminal'", "score": -0.00811434001644784}]}
{"index": 914, "beams": [{"orig_question": "Find the average grade of all students who have some friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)", "score": -0.02550113190244474}]}
{"index": 915, "beams": [{"orig_question": "What is the average grade of students who have friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)", "score": -0.006104940670148551}]}
{"index": 916, "beams": [{"orig_question": "Find the minimum grade of students who have no friends.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Min"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Min(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)", "score": -0.009497508624576767}]}
{"index": 917, "beams": [{"orig_question": "What is the lowest grade of students who do not have any friends?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)", "score": -0.08636881725243484}]}
{"index": 918, "beams": [{"orig_question": "Which states have both owners and professionals living there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Owners.state FROM Owners INTERSECT SELECT Professionals.state FROM Professionals", "score": -0.007259097992459829}]}
{"index": 919, "beams": [{"orig_question": "Find the states where both owners and professionals live.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Owners.state FROM Owners INTERSECT SELECT Professionals.state FROM Professionals", "score": -0.0030353810313954455}]}
{"index": 920, "beams": [{"orig_question": "What is the average age of the dogs who have gone through any treatments?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(Dogs.age) FROM Dogs WHERE Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments)", "score": -0.011328517459219256}]}
{"index": 921, "beams": [{"orig_question": "Find the average age of the dogs who went through treatments.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(Dogs.age) FROM Dogs WHERE Treatments.dog_id IN (SELECT Treatments.dog_id FROM Treatments)", "score": -0.035880787298069095}]}
{"index": 922, "beams": [{"orig_question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "union": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments WHERE Professionals.state = 'terminal' GROUP BY Professionals.professional_id HAVING Count(*) > 'terminal' UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING Count(*) > 'terminal'", "score": -1.7941876672488775}]}
{"index": 923, "beams": [{"orig_question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "union": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments WHERE Professionals.state = 'terminal' GROUP BY Professionals.professional_id HAVING Count(*) > 'terminal' UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING Count(*) > 'terminal'", "score": -0.34282362981110737}]}
{"index": 924, "beams": [{"orig_question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments WHERE Treatments.cost_of_treatment > 'terminal'", "score": -0.0026469230651500197}]}
{"index": 925, "beams": [{"orig_question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments WHERE Treatments.cost_of_treatment > 'terminal'", "score": -0.09742867670134814}]}
{"index": 926, "beams": [{"orig_question": "Which first names are used for professionals or owners but are not used as dog names?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Professionals.first_name FROM Professionals JOIN Owners EXCEPT SELECT Professionals.first_name FROM Professionals JOIN Dogs", "score": -0.8173847581458631}]}
{"index": 927, "beams": [{"orig_question": "Find the first names that are used for professionals or owners but are not used as dog names.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.first_name FROM Professionals EXCEPT SELECT Professionals.first_name FROM Professionals JOIN Dogs", "score": -0.5802318139794522}]}
{"index": 928, "beams": [{"orig_question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments", "score": -0.012476458274157665}]}
{"index": 929, "beams": [{"orig_question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "except": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Treatments.professional_id, Professionals.email_address, Professionals.email_address FROM Professionals JOIN Treatments", "score": -0.3811026434270275}]}
{"index": 930, "beams": [{"orig_question": "Which owner owns the most dogs? List the owner id, first name and last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs GROUP BY Owners.owner_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.5178555840999124}]}
{"index": 931, "beams": [{"orig_question": "Return the owner id, first name and last name of the owner who has the most dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs GROUP BY Dogs.owner_id ORDER BY Count(*) Desc LIMIT 1", "score": -0.003975095951290086}]}
{"index": 932, "beams": [{"orig_question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'", "score": -0.00196230344225512}]}
{"index": 933, "beams": [{"orig_question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'", "score": -0.0021963105496567437}]}
{"index": 934, "beams": [{"orig_question": "What is the name of the breed with the most dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0008687730351013556}]}
{"index": 935, "beams": [{"orig_question": "Which breed do the most dogs have? Give me the breed name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1", "score": -0.0070203029481490375}]}
{"index": 936, "beams": [{"orig_question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs JOIN Treatments GROUP BY Owners.owner_id ORDER BY Sum(Treatments.cost_of_treatment) Desc LIMIT 1", "score": -0.31948873490438245}]}
{"index": 937, "beams": [{"orig_question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs JOIN Treatments GROUP BY Owners.owner_id ORDER BY Sum(Treatments.cost_of_treatment) Desc LIMIT 1", "score": -0.0033594369273117763}]}
{"index": 938, "beams": [{"orig_question": "What is the description of the treatment type that costs the least money in total?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 47, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types GROUP BY Treatments.treatment_type_code ORDER BY Sum(Treatments.cost_of_treatment) Asc LIMIT 1", "score": -0.18254173919456207}]}
{"index": 939, "beams": [{"orig_question": "Give me the description of the treatment type whose total cost is the lowest.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 47, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types GROUP BY Treatments.treatment_type_code ORDER BY Sum(Treatments.cost_of_treatment) Asc LIMIT 1", "score": -0.0027374882191679717}]}
{"index": 940, "beams": [{"orig_question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.owner_id, Sum(Owners.zip_code) FROM Owners JOIN Dogs GROUP BY Owners.owner_id ORDER BY Sum(Treatments.cost_of_treatment) Desc LIMIT 1", "score": -0.7540467388430443}]}
{"index": 941, "beams": [{"orig_question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 16, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Sum"}, "col_id": 49, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs JOIN Treatments GROUP BY Owners.owner_id ORDER BY Sum(Treatments.cost_of_treatment) Desc LIMIT 1", "score": -13.269924248830613}]}
{"index": 942, "beams": [{"orig_question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING Count(*) >= 'terminal'", "score": -0.10459726114628864}]}
{"index": 943, "beams": [{"orig_question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}], "having": {"_type": "Ge", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Treatments.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments GROUP BY Treatments.professional_id HAVING Count(*) >= 'terminal'", "score": -1.0074041783777261}]}
{"index": 944, "beams": [{"orig_question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT DISTINCT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments WHERE Treatments.cost_of_treatment < (SELECT Avg(Treatments.cost_of_treatment) FROM Treatments)", "score": -0.04548454284581993}]}
{"index": 945, "beams": [{"orig_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 40, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT DISTINCT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments WHERE Treatments.cost_of_treatment < (SELECT Avg(Treatments.cost_of_treatment) FROM Treatments)", "score": -0.07165694236634579}]}
{"index": 946, "beams": [{"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals", "score": -0.005070974584661769}]}
{"index": 947, "beams": [{"orig_question": "What are the date and the operating professional's first name of each treatment?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals", "score": -0.09761609136374716}]}
{"index": 948, "beams": [{"orig_question": "List the cost of each treatment and the corresponding treatment type description.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types", "score": -0.11895027756656162}]}
{"index": 949, "beams": [{"orig_question": "What are the cost and treatment type description of each treatment?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types", "score": -0.00043129915229656035}]}
{"index": 950, "beams": [{"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs JOIN Sizes", "score": -0.7061297892773553}]}
{"index": 951, "beams": [{"orig_question": "What are each owner's first name, last name, and the size of their dog?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs", "score": -0.06212341783336228}]}
{"index": 952, "beams": [{"orig_question": "List pairs of the owner's first name and the dogs's name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs", "score": -0.0004523992486156203}]}
{"index": 953, "beams": [{"orig_question": "What are each owner's first name and their dogs's name?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs", "score": -0.00041723251331404754}]}
{"index": 954, "beams": [{"orig_question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments GROUP BY Dogs.breed_code ORDER BY Count(*) Asc LIMIT 1", "score": -0.36993988950501233}]}
{"index": 955, "beams": [{"orig_question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments GROUP BY Dogs.breed_code ORDER BY Count(*) Asc LIMIT 1", "score": -0.03479587741355772}]}
{"index": 956, "beams": [{"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs WHERE Owners.state = 'terminal'", "score": -0.008725710213184357}]}
{"index": 957, "beams": [{"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs WHERE Owners.state = 'terminal'", "score": -0.0021130844033905305}]}
{"index": 958, "beams": [{"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 30, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments", "score": -0.0008702277095764543}]}
{"index": 959, "beams": [{"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 30, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}, {"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments", "score": -0.0012354717657672154}]}
{"index": 960, "beams": [{"orig_question": "List the last name of the owner owning the youngest dog.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.last_name FROM Owners JOIN Dogs ORDER BY Dogs.date_of_birth Asc LIMIT 1", "score": -0.4108163400835565}]}
{"index": 961, "beams": [{"orig_question": "Who owns the youngest dog? Give me his or her last name.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}, {"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Owners.last_name FROM Owners JOIN Dogs ORDER BY Dogs.date_of_birth Asc LIMIT 1", "score": -0.3011623617130397}]}
{"index": 962, "beams": [{"orig_question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'terminal' OR Professionals.state = 'terminal'", "score": -0.002554059028256006}]}
{"index": 963, "beams": [{"orig_question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'terminal' OR Professionals.state = 'terminal'", "score": -0.0005823373721796088}]}
{"index": 964, "beams": [{"orig_question": "What are the arriving date and the departing date of all the dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 30, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -0.00030195711678260295}]}
{"index": 965, "beams": [{"orig_question": "List the arrival date and the departure date for all the dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 30, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 32, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -0.0003043407923470909}]}
{"index": 966, "beams": [{"orig_question": "How many dogs went through any treatments?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Count(DISTINCT Treatments.dog_id) FROM Treatments", "score": -0.0005288124083833168}]}
{"index": 967, "beams": [{"orig_question": "Count the number of dogs that went through a treatment.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Count(DISTINCT Treatments.dog_id) FROM Treatments", "score": -0.0005340576153685106}]}
{"index": 968, "beams": [{"orig_question": "How many professionals have performed any treatment to dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Count(DISTINCT Treatments.professional_id) FROM Treatments", "score": -0.10167205333704032}]}
{"index": 969, "beams": [{"orig_question": "Find the number of professionals who have ever treated dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": true}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Count(DISTINCT Treatments.professional_id) FROM Treatments", "score": -0.000533461570704219}]}
{"index": 970, "beams": [{"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE 'terminal'", "score": -0.2939575682115674}]}
{"index": 971, "beams": [{"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 34, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 36, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 38, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 37, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE 'terminal'", "score": -0.05149735156010138}]}
{"index": 972, "beams": [{"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE 'terminal'", "score": -0.2275148180914357}]}
{"index": 973, "beams": [{"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 11, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 12, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 17, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Like", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE 'terminal'", "score": -0.013215684943020278}]}
{"index": 974, "beams": [{"orig_question": "How many dogs have an age below the average?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM Dogs WHERE Dogs.age < (SELECT Avg(Dogs.age) FROM Dogs)", "score": -0.0014427896797997164}]}
{"index": 975, "beams": [{"orig_question": "Count the number of dogs of an age below the average.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM Dogs WHERE Dogs.age < (SELECT Avg(Dogs.age) FROM Dogs)", "score": -0.0014700888723382377}]}
{"index": 976, "beams": [{"orig_question": "How much does the most recent treatment cost?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment Desc LIMIT 1", "score": -0.06135967373779749}]}
{"index": 977, "beams": [{"orig_question": "Show me the cost of the most recently performed treatment.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 49, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 48, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}, "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment Desc LIMIT 1", "score": -0.017766475676864957}]}
{"index": 978, "beams": [{"orig_question": "How many dogs have not gone through any treatment?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)", "score": -0.0010830163942827653}]}
{"index": 979, "beams": [{"orig_question": "Tell me the number of dogs that have not received any treatment .", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 20, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 45, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Count(*) FROM Dogs WHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)", "score": -0.0011596679680394573}]}
{"index": 980, "beams": [{"orig_question": "How many owners temporarily do not have any dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Count(*) FROM Owners WHERE Owners.owner_id NOT IN (SELECT Dogs.owner_id FROM Dogs)", "score": -0.0015196800211114692}]}
{"index": 981, "beams": [{"orig_question": "Find the number of owners who do not own any dogs at this moment.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 21, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 4}]}}, "inferred_code": "SELECT Count(*) FROM Owners WHERE Owners.owner_id NOT IN (SELECT Dogs.owner_id FROM Dogs)", "score": -0.0013169049876395889}]}
{"index": 982, "beams": [{"orig_question": "How many professionals did not operate any treatment on dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Count(*) FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT Treatments.professional_id FROM Treatments)", "score": -0.0019447803447434353}]}
{"index": 983, "beams": [{"orig_question": "Find the number of professionals who have not treated any dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 33, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 46, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 7}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Count(*) FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT Treatments.professional_id FROM Treatments)", "score": -0.0015658140153718136}]}
{"index": 984, "beams": [{"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'terminal' INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'terminal'", "score": -0.01449357344669977}]}
{"index": 985, "beams": [{"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 25, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 29, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 22, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'terminal' INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'terminal'", "score": -0.030535278841767877}]}
{"index": 986, "beams": [{"orig_question": "What is the average age of all the dogs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(Dogs.age) FROM Dogs", "score": -0.00025379657744650785}]}
{"index": 987, "beams": [{"orig_question": "Compute the average age of all the dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Avg"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Avg(Dogs.age) FROM Dogs", "score": -0.00024044513701682035}]}
{"index": 988, "beams": [{"orig_question": "What is the age of the oldest dog?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth Desc LIMIT 1", "score": -0.012380379252128648}]}
{"index": 989, "beams": [{"orig_question": "Tell me the age of the oldest dog.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 26, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 27, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth Desc LIMIT 1", "score": -0.0015439949347637594}]}
{"index": 990, "beams": [{"orig_question": "How much does each charge type costs? List both charge type and amount.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -0.000263929366887794}]}
{"index": 991, "beams": [{"orig_question": "List each charge type and its amount.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -0.00025200843808192985}]}
{"index": 992, "beams": [{"orig_question": "How much does the most expensive charge type costs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount Desc LIMIT 1", "score": -0.0007996864515007474}]}
{"index": 993, "beams": [{"orig_question": "What is the charge amount of the most expensive charge type?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount Desc LIMIT 1", "score": -0.014234709499760356}]}
{"index": 994, "beams": [{"orig_question": "List the email, cell phone and home phone of all the professionals.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals", "score": -0.004830827929673376}]}
{"index": 995, "beams": [{"orig_question": "What are the email, cell phone and home phone of each professional?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 41, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 43, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 42, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}]}}, "inferred_code": "SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals", "score": -0.002425458746635911}]}
{"index": 996, "beams": [{"orig_question": "What are all the possible breed type and size type combinations?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT Dogs.breed_code, Dogs.size_code FROM Dogs", "score": -0.5089183622039855}]}
{"index": 997, "beams": [{"orig_question": "Find the distinct breed type and size type combinations for dogs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 23, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 24, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 5}]}}, "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs", "score": -0.0014251386292016832}]}
{"index": 998, "beams": [{"orig_question": "List the first name of all the professionals along with the description of the treatment they have done.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments JOIN Treatment_Types", "score": -0.0008246897976391665}]}
{"index": 999, "beams": [{"orig_question": "What are each professional's first name and description of the treatment they have performed?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 35, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 6}, {"_type": "Table", "table_id": 7}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments JOIN Treatment_Types", "score": -0.0014523050194767961}]}
{"index": 1000, "beams": [{"orig_question": "How many singers are there?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM singer", "score": -0.00021159648059665415}]}
{"index": 1001, "beams": [{"orig_question": "What is the count of singers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT Count(*) FROM singer", "score": -0.00023615355735273624}]}
{"index": 1002, "beams": [{"orig_question": "List the name of singers in ascending order of net worth.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Asc", "score": -0.00048720836480242724}]}
{"index": 1003, "beams": [{"orig_question": "What are the names of singers ordered by ascending net worth?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Asc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Asc", "score": -0.0004988908094674116}]}
{"index": 1004, "beams": [{"orig_question": "What are the birth year and citizenship of singers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": -0.000255584716796875}]}
{"index": 1005, "beams": [{"orig_question": "What are the birth years and citizenships of the singers?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": -0.0002467632291427435}]}
{"index": 1006, "beams": [{"orig_question": "List the name of singers whose citizenship is not \"France\".", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != 'terminal'", "score": -0.0011510848999023438}]}
{"index": 1007, "beams": [{"orig_question": "What are the names of the singers who are not French citizens?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Ne", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != 'terminal'", "score": -0.0014619827270507812}]}
{"index": 1008, "beams": [{"orig_question": "Show the name of singers whose birth year is either 1948 or 1949?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Birth_Year = 'terminal' OR singer.Birth_Year = 'terminal'", "score": -0.0009251832843801822}]}
{"index": 1009, "beams": [{"orig_question": "What are the names of the singers whose birth years are either 1948 or 1949?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Birth_Year = 'terminal' OR singer.Birth_Year = 'terminal'", "score": -0.001037001541583038}]}
{"index": 1010, "beams": [{"orig_question": "What is the name of the singer with the largest net worth?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc LIMIT 1", "score": -0.0003871917724609375}]}
{"index": 1011, "beams": [{"orig_question": "What is the name of the singer who is worth the most?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions Desc LIMIT 1", "score": -0.0005476474760186534}]}
{"index": 1012, "beams": [{"orig_question": "Show different citizenship of singers and the number of singers of each citizenship.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship, Count(*) FROM singer GROUP BY singer.Citizenship", "score": -0.0005512237548828125}]}
{"index": 1013, "beams": [{"orig_question": "For each citizenship, how many singers are from that country?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship, Count(*) FROM singer GROUP BY singer.Citizenship", "score": -0.0006227493286132812}]}
{"index": 1014, "beams": [{"orig_question": "Please show the most common citizenship of singers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY Count(*) Desc LIMIT 1", "score": -0.00043964385986328125}]}
{"index": 1015, "beams": [{"orig_question": "What is the most common singer citizenship ?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "order_by": {"_type": "order_by", "order": {"_type": "Desc"}, "val_units": [{"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}]}, "limit": true}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY Count(*) Desc LIMIT 1", "score": -0.00045299530029296875}]}
{"index": 1016, "beams": [{"orig_question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship, Max(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship", "score": -0.001208424568169164}]}
{"index": 1017, "beams": [{"orig_question": "For each citizenship, what is the maximum net worth?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Max"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship, Max(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship", "score": -0.007477402675185374}]}
{"index": 1018, "beams": [{"orig_question": "Show titles of songs and names of singers.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song", "score": -0.014225500966830396}]}
{"index": 1019, "beams": [{"orig_question": "What are the song titles and singer names?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song", "score": -0.5284894107352898}]}
{"index": 1020, "beams": [{"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song WHERE song.Sales > 'terminal'", "score": -0.3768785968421753}]}
{"index": 1021, "beams": [{"orig_question": "what are the different names of the singers that have sales more than 300000?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": true, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT DISTINCT singer.Name FROM song JOIN singer WHERE song.Sales > 'terminal'", "score": -0.4851442907238379}]}
{"index": 1022, "beams": [{"orig_question": "Show the names of singers that have more than one song.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name FROM singer JOIN song GROUP BY song.Singer_ID HAVING Count(*) > 'terminal'", "score": -0.029435034799888626}]}
{"index": 1023, "beams": [{"orig_question": "What are the names of the singers that have more than one songs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}], "having": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "Count"}, "col_id": 0, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name FROM singer JOIN song GROUP BY song.Singer_ID HAVING Count(*) > 'terminal'", "score": -0.01916079384125169}]}
{"index": 1024, "beams": [{"orig_question": "Show the names of singers and the total sales of their songs.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, Sum(song.Sales) FROM singer JOIN song GROUP BY singer.Name", "score": -0.64918610571317}]}
{"index": 1025, "beams": [{"orig_question": "For each singer name, what is the total sales for their songs?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}, {"_type": "agg", "agg_id": {"_type": "Sum"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 9, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby", "group_by": [{"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}]}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 1}]}}, "inferred_code": "SELECT singer.Name, Sum(song.Sales) FROM singer JOIN song GROUP BY singer.Name", "score": -0.1453983244999506}]}
{"index": 1026, "beams": [{"orig_question": "List the name of singers that do not have any song.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)", "score": -0.0007811784744191641}]}
{"index": 1027, "beams": [{"orig_question": "What is the sname of every sing that does not have any song?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Not", "c": {"_type": "In", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 1, "is_distinct": false}}, "val1": {"_type": "ValSql", "s": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 8, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}]}}}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)", "score": -0.0008524656294568445}]}
{"index": 1028, "beams": [{"orig_question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal' INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > 'terminal'", "score": -0.003957033157320211}]}
{"index": 1029, "beams": [{"orig_question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Lt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu", "intersect": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 5, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 3, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}]}}, "inferred_code": "SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 'terminal' INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > 'terminal'", "score": -0.004363775253068525}]}
{"index": 1030, "beams": [{"orig_question": "How many available features are there in total?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "Count"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 0, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Count(*) FROM Other_Available_Features", "score": -0.00020301339077377634}]}
{"index": 1031, "beams": [{"orig_question": "What is the feature type name of feature AirCon?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 2, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 7, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 0}, {"_type": "Table", "table_id": 2}]}}, "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features WHERE Other_Available_Features.feature_name = 'terminal'", "score": -0.0003108978271484375}]}
{"index": 1032, "beams": [{"orig_question": "Show the property type descriptions of properties belonging to that code.", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 4, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where"}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 1}, {"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Properties", "score": -0.017246505077537222}]}
{"index": 1033, "beams": [{"orig_question": "What are the names of properties that are either houses or apartments with more than 1 room?", "model_output": {"_type": "sql", "select": {"_type": "select", "is_distinct": false, "aggs": [{"_type": "agg", "agg_id": {"_type": "NoneAggOp"}, "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 13, "is_distinct": false}}}]}, "sql_where": {"_type": "sql_where", "where": {"_type": "Or", "left": {"_type": "Eq", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 10, "is_distinct": false}}, "val1": {"_type": "Terminal"}}, "right": {"_type": "Gt", "val_unit": {"_type": "Column", "col_unit1": {"_type": "col_unit", "agg_id": {"_type": "NoneAggOp"}, "col_id": 15, "is_distinct": false}}, "val1": {"_type": "Terminal"}}}}, "sql_groupby": {"_type": "sql_groupby"}, "sql_orderby": {"_type": "sql_orderby", "limit": false}, "sql_ieu": {"_type": "sql_ieu"}, "from": {"_type": "from", "table_units": [{"_type": "Table", "table_id": 3}]}}, "inferred_code": "SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code = 'terminal' OR Properties.room_count > 'terminal'", "score": -0.0009664297019753576}]}
